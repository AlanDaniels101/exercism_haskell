
==================== FINAL INTERFACE ====================
2019-04-08 15:56:12.6460303 UTC

interface main:Main 8043
  interface hash: 8e388923b5feaa3591e09dc2e266fb2e
  ABI hash: cf437e685dba232f1d1ae2dc5891a452
  export-list hash: ab555515de004c2aff41f8b1dabae5c9
  orphan hash: 27c89127d14ad9272eb6c1ded98c58fc
  flag hash: 8aab0c017873a3054971c6e5433a63ec
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.11.3 Win32-2.6.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 base-4.11.1.0
                      bytestring-0.10.8.2 call-stack-0.1.0 clock-0.7.2 colour-2.3.4
                      containers-0.5.11.0 deepseq-1.4.3.0 directory-1.3.1.5
                      filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hspec-2.5.5
                      hspec-core-2.5.5 hspec-expectations-0.8.2 integer-gmp-1.0.2.0
                      mintty-0.1.2 pretty-1.1.3.6 primitive-0.6.3.0 quickcheck-io-0.2.0
                      random-1.1 rna-transcription-1.3.0.10 setenv-0.1.1.3 stm-2.4.5.0
                      template-haskell-2.13.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.5.0
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         hspec-core-2.5.5:Test.Hspec.Core.Example
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.11.1.0:Data.Either 917cb7ca74324934e13727e32d71d117
import  -/  base-4.11.1.0:Data.Foldable 6cf3e918f22d03c0870804f05cd183d1
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  hspec-2.5.5:Test.Hspec 54df06f5d545fec5f91cea5cb55c0ae8
import  -/  hspec-2.5.5:Test.Hspec.Runner 9fe7f63f5e6ed51f346724e5e71cfbc5
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Config.Options 44eafedded707b18de0b18ece30e85fc
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Runner aacfbe7ef9810029c809d32d98b97f0a
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec c73480f52a618942c509ac8e85ded21d
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec.Monad e5e9ce617af58e105519cbbabb1c58c0
import  -/  hspec-expectations-0.8.2:Test.Hspec.Expectations 40271346c6df10d72d14c4ff3ae952ea
import  -/  rna-transcription-1.3.0.10:DNA cc8f66eb1653f75117d9a99d6a821528
4d18660cbb819f186910f326e26a7f44
  $s$fEqEither ::
    GHC.Classes.Eq (Data.Either.Either GHC.Types.Char [GHC.Types.Char])
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either GHC.Types.Char [GHC.Types.Char])
                  (\ (ds :: Data.Either.Either GHC.Types.Char [GHC.Types.Char])
                     (ds1 :: Data.Either.Either GHC.Types.Char [GHC.Types.Char]) ->
                   case ds of wild {
                     Data.Either.Left a1
                     -> case ds1 of wild1 {
                          Data.Either.Left b1 -> GHC.Classes.eqChar a1 b1
                          Data.Either.Right ipv -> GHC.Types.False }
                     Data.Either.Right a1
                     -> case ds1 of wild1 {
                          Data.Either.Left ipv -> GHC.Types.False
                          Data.Either.Right b1 -> GHC.Base.eqString a1 b1 } })
                  Main.$s$fEqEither_$s$fEqEither_$c/= -}
bb156439493337ce69a57b43e5257f51
  $s$fEqEither_$s$fEqEither_$c/= ::
    Data.Either.Either GHC.Types.Char [GHC.Types.Char]
    -> Data.Either.Either GHC.Types.Char [GHC.Types.Char]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Either.Either GHC.Types.Char [GHC.Types.Char])
                   (y :: Data.Either.Either GHC.Types.Char [GHC.Types.Char]) ->
                 case x of wild {
                   Data.Either.Left a1
                   -> case y of wild1 {
                        Data.Either.Left b1
                        -> case GHC.Classes.eqChar a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        Data.Either.Right ipv -> GHC.Types.True }
                   Data.Either.Right a1
                   -> case y of wild1 {
                        Data.Either.Left ipv -> GHC.Types.True
                        Data.Either.Right b1
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
411cb0d57241e9722859dddeac3b84eb
  $s$fShowEither ::
    GHC.Show.Show (Data.Either.Either GHC.Types.Char [GHC.Types.Char])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either GHC.Types.Char [GHC.Types.Char])
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ GHC.Types.Char
                     @ [GHC.Types.Char]
                     GHC.Show.$fShowChar
                     GHC.Show.$fShow[]_$s$fShow[]1)
                  (\ (x :: Data.Either.Either GHC.Types.Char [GHC.Types.Char]) ->
                   case x of wild {
                     Data.Either.Left b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither4)
                          (GHC.Show.$fShowChar_$cshowsPrec
                             Data.Either.$fReadEither6
                             b1
                             (GHC.Types.[] @ GHC.Types.Char))
                     Data.Either.Right b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither2)
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)3
                             (GHC.Show.showLitString
                                b1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Types.[] @ GHC.Types.Char)))) })
                  (\ (ls :: [Data.Either.Either GHC.Types.Char [GHC.Types.Char]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Either.Either GHC.Types.Char [GHC.Types.Char])
                     (Data.Either.$fShowEither_$cshowsPrec
                        @ GHC.Types.Char
                        @ [GHC.Types.Char]
                        GHC.Show.$fShowChar
                        GHC.Show.$fShow[]_$s$fShow[]1
                        Data.Either.$fShowEither1)
                     ls
                     s) -}
095b125d24e5559302dc7230fcead036
  $s$fShowEither_$cshowList ::
    [Data.Either.Either GHC.Types.Char [GHC.Types.Char]]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Either.Either GHC.Types.Char [GHC.Types.Char]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either GHC.Types.Char [GHC.Types.Char])
                   (Data.Either.$fShowEither_$cshowsPrec
                      @ GHC.Types.Char
                      @ [GHC.Types.Char]
                      GHC.Show.$fShowChar
                      GHC.Show.$fShow[]_$s$fShow[]1
                      Data.Either.$fShowEither1)
                   ls
                   s) -}
3cceb5ec98bab63030fa381871e03dc7
  $s$fShowEither_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Either.Either GHC.Types.Char [GHC.Types.Char]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.Either.Either GHC.Types.Char [GHC.Types.Char]) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.Either.$w$cshowsPrec
                   @ GHC.Types.Char
                   @ [GHC.Types.Char]
                   GHC.Show.$fShowChar
                   GHC.Show.$fShow[]_$s$fShow[]1
                   ww1
                   w3 }) -}
8f470deca0048d02e6fc8121ab8abb17
  $tc'Case :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8197111133229858407##
                   13847006553897280588##
                   Main.$trModule
                   Main.$tc'Case2
                   0#
                   Main.$tc'Case1) -}
6fc21dd8b35ae7df9abfcd56a3c1f8ad
  $tc'Case1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0c0299238ee13fbc2e14231d59357ec9
  $tc'Case2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Case3) -}
b70b9a2f50a01b383c0fc203a93b45f6
  $tc'Case3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Case"#) -}
9f9427b68a1c0df6b95c3a3d566064e4
  $tcCase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   990021888930651814##
                   4262142848388084561##
                   Main.$trModule
                   Main.$tcCase1
                   0#
                   GHC.Types.krep$*) -}
b0dff1fba9a2e1fbd8ccfcfdc7bfd5cc
  $tcCase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCase2) -}
7179be3aa9b5f07778c569f16b1ed2bf
  $tcCase2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Case"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
6dbdc0dfd014f7cb942ebd8dae9a50c7
  $wc ::
    GHC.Base.String
    -> GHC.Base.String
    -> Data.Either.Either GHC.Types.Char GHC.Base.String
    -> Control.Monad.Trans.Writer.Lazy.WriterT
         [Test.Hspec.Core.Tree.SpecTree ()] GHC.Types.IO ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 5,
     Strictness: <L,1*U><L,U><L,U><C(S(SL)),1*C1(U(U,U(1*U,1*U)))><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: Data.Either.Either GHC.Types.Char GHC.Base.String)
                   (w :: Control.Monad.Trans.Writer.Lazy.WriterT
                           [Test.Hspec.Core.Tree.SpecTree ()] GHC.Types.IO ())
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                           <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                           <GHC.Types.IO>_R
                           <()>_N ; GHC.Types.N:IO[0]
                                        <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R)
                        w1 of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (case ipv3 of wild1 { (,) b1 w' -> b1 },
                     GHC.Base.++
                       @ (Test.Hspec.Core.Tree.Tree
                            (Test.Hspec.Core.Example.ActionWith ())
                            (Test.Hspec.Core.Tree.Item ()))
                       (GHC.Types.:
                          @ (Test.Hspec.Core.Tree.SpecTree
                               (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                          (Test.Hspec.Core.Tree.Leaf
                             @ (Test.Hspec.Core.Example.ActionWith
                                  (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                             @ (Test.Hspec.Core.Tree.Item
                                  (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                             (Test.Hspec.Core.Tree.Item
                                @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                                (case ww of wild {
                                   []
                                   -> case Main.main43 of wild1 {
                                        GHC.Base.Nothing -> Test.Hspec.Core.Tree.specItem1
                                        GHC.Base.Just v -> v }
                                   : ds2 ds3 -> wild })
                                Main.main33
                                (GHC.Base.Nothing @ GHC.Types.Bool)
                                (Test.Hspec.Core.Example.safeEvaluateExample1
                                   @ Test.Hspec.Expectations.Expectation
                                   Test.Hspec.Core.Example.$fExampleIO1
                                     `cast`
                                   ((<Test.Hspec.Expectations.Expectation>_R
                                     ->_R <Test.Hspec.Core.Example.Params>_R
                                     ->_R <(Test.Hspec.Core.Example.Arg
                                              Test.Hspec.Expectations.Expectation
                                            -> GHC.Types.IO ())
                                           -> GHC.Types.IO ()>_R
                                     ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Test.Hspec.Core.Example.Result>_R)) ; Sym (Test.Hspec.Core.Example.N:Example[0]
                                                                                                   <Test.Hspec.Expectations.Expectation>_N))
                                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                    Test.HUnit.Lang.assertEqual1
                                      @ (Data.Either.Either GHC.Types.Char GHC.Base.String)
                                      Main.main20
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                      Main.$s$fEqEither
                                      Main.$s$fShowEither
                                      (GHC.Types.[] @ GHC.Types.Char)
                                      ww2
                                      (DNA.toRNA_go ww1)
                                      eta2)
                                     `cast`
                                   (Sym (GHC.Types.N:IO[0] <()>_R)))
                                  `cast`
                                (<Test.Hspec.Core.Example.Params>_R
                                 ->_R <Test.Hspec.Core.Example.ActionWith
                                         (Test.Hspec.Core.Example.Arg
                                            Test.Hspec.Expectations.Expectation)
                                       -> GHC.Types.IO ()>_R
                                 ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                 ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))))
                          (GHC.Types.[]
                             @ (Test.Hspec.Core.Tree.SpecTree
                                  (Test.Hspec.Core.Example.Arg
                                     Test.Hspec.Expectations.Expectation))))
                         `cast`
                       ([(Test.Hspec.Core.Tree.Tree
                            (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                             ->_R <GHC.Types.IO ()>_R)
                            (Test.Hspec.Core.Tree.Item
                               (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                       (case ipv3 of wild { (,) b1 w' -> w' })) #) }) -}
10cd8419e29f2f9e226414ed7e538e98
  data Case
    = Case {description :: GHC.Base.String,
            dna :: GHC.Base.String,
            expected :: Data.Either.Either GHC.Types.Char GHC.Base.String}
10cd8419e29f2f9e226414ed7e538e98
  description :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds1 }) -}
10cd8419e29f2f9e226414ed7e538e98
  dna :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds2 }) -}
10cd8419e29f2f9e226414ed7e538e98
  expected ::
    Main.Case -> Data.Either.Either GHC.Types.Char GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds3 }) -}
334f9c030d20ff6f3c4701847fd07829
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ee20598311f8ccc751f1da2ffd63d478
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.Hspec.Core.Runner.hspec2
                        Main.main97
                        Main.main2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.exitFailure1 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
c9e80f1b380c30a99c1173594512d821
  main10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main49
                   Main.main47
                   Main.main14
                   Main.main11
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
250f5ed8414b1eb4b136183dd41a7668
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main18
                   Main.main16
                   Main.main14
                   Main.main12
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
2ba791655b1d615c643441ff27efa999
  main12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.main13 #)) -}
f1dadfb9e7853cb9df2687b78475ddda
  main13 :: ((), [Test.Hspec.Core.Tree.SpecTree ()])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Tuple.(),
                  GHC.Types.[]
                    @ (Test.Hspec.Core.Tree.Tree
                         (Test.Hspec.Core.Example.ActionWith ())
                         (Test.Hspec.Core.Tree.Item ())))) -}
cbb83db7c0c88cd119e8e62a01e3b561
  main14 :: Data.Either.Either GHC.Types.Char GHC.Base.String
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ GHC.Types.Char
                   @ GHC.Base.String
                   Main.main15) -}
54a696b011d981a7d9b99418d9c4c53c
  main15 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'X'#) -}
54782c9a841abc80b01b8ddbf913a3e3
  main16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main17) -}
984d01279e46111811c4a7434e2edf95
  main17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ACGTXXXCTTAA"#) -}
ed92b478c9a353e771c9ed0682407e3d
  main18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main19) -}
211ff60b3b325513f1d1bef2f1ce8e84
  main19 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("correctly handles partially invalid DNA input"#) -}
9705993f7fe4f8c54a4a929da13020d5
  main2 :: Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Unfolding: (Main.main89
                   Main.main87
                   Main.main3
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                       <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                       <GHC.Types.IO>_R
                                                       <()>_N) ; Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N) <()>_N))) -}
62f42a7797ea5d945147bac813c5632f
  main20 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?6
                   Test.HUnit.Base.@?=2
                   Main.main21) -}
4471cda96b6e5bd5ffc8972670ed87ce
  main21 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe6
                   Test.Hspec.Expectations.shouldBe2
                   Main.main22) -}
15dc9309ede758097fb011206ac3d589
  main22 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main31
                   Main.main23
                   GHC.Stack.Types.EmptyCallStack) -}
416944139efaf0dcaf5f0986b12864ed
  main23 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main30
                   Main.main29
                   Main.main27
                   Main.main26
                   Main.main25
                   Main.main26
                   Main.main24) -}
bd85c68d1e949dbfc266bcdd98e516c7
  main24 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 67#) -}
0a55744a9f2acf546f1da660bdfd2d0c
  main25 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 38#) -}
5ace287bbb241ebc4f5b52d62cada31e
  main26 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 15#) -}
8f410dcd88df4383b8ef20ccc2ef33f2
  main27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main28) -}
8c4b6646f7da00f2366d9860792faa93
  main28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test\\Tests.hs"#) -}
66b23044dc2ab9c8d5c430d1d8eeb14e
  main29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule2) -}
80b39488de2ecc08643ec143cce4d390
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Main.$wc
                   Main.main85
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main84
                   Main.main4
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
179f393d5cad86cda2ea20f0a682ae47
  main30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule4) -}
795e31b254c1e480205f69e02e222f0c
  main31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main32) -}
3e2810d55c4c358aebbd68b6348421e1
  main32 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("shouldBe"#) -}
52560b73339a4068d3c8b1f8330a54f8
  main33 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location.Location
  {- Unfolding: (Test.Hspec.Core.Tree.location11 Main.main34) -}
f124fd1ba71ef690aff5f59d9f237110
  main34 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.location9
                   Test.Hspec.Core.Tree.location1
                   Main.main35) -}
5d88ea0e183102644158348a9177cd18
  main35 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem14
                   Test.Hspec.Core.Tree.specItem11
                   Main.main36) -}
4fd7498363782b5b893e99a49050807b
  main36 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it6
                   Test.Hspec.Core.Spec.it2
                   Main.main37) -}
2a614ca624f8108b8235e7e3ddc03c68
  main37 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main41
                   Main.main38
                   GHC.Stack.Types.EmptyCallStack) -}
e395b4a7857e56faa42d25760cb67103
  main38 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main30
                   Main.main29
                   Main.main27
                   Main.main26
                   Main.main40
                   Main.main26
                   Main.main39) -}
dc12b60f2f7c742a025a2025e486b3ec
  main39 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 35#) -}
0418fae8e51c7a64f4ef1c19f0eb81b2
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main82
                   Main.main75
                   Main.main81
                   Main.main5
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
657df66b23e3815a180a94bae968ec5b
  main40 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 21#) -}
2d7b9cb40fa1d68c417532ad995cbd96
  main41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main42) -}
ebf7193b281eb41d2299d7ca53b82128
  main42 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("it"#) -}
3742ce62a84102c639e20792d9168bc0
  main43 :: GHC.Base.Maybe GHC.Base.String
  {- Unfolding: (Test.Hspec.Core.Tree.specGroup19 Main.main44) -}
b530d3c861d14cc243c6cf4f74487684
  main44 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.location9
                   Test.Hspec.Core.Tree.specGroup15
                   Main.main45) -}
68d53197ca25611058fd4027b18e7e01
  main45 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specGroup13
                   Test.Hspec.Core.Tree.specItem9
                   Main.main46) -}
6e62612fe325c61ef12b9d847789333c
  main46 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem7
                   Test.Hspec.Core.Tree.specItem3
                   Main.main36) -}
18036392b7c0251bb50c9096419c5184
  main47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main48) -}
6d94330a2bef92c782a08e96ccee3719
  main48 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("XXX"#) -}
679ff484fe47f9976f41e2ca70597d84
  main49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main50) -}
0cc43efb3ee917ef8a2198e3d5ef8c38
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main79
                   Main.main77
                   Main.main74
                   Main.main6
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
aba56d8757636fcb842d1387a842e5ee
  main50 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("correctly handles completely invalid DNA input"#) -}
6244cc2eaaaf5861e31657c2bda55439
  main51 :: Data.Either.Either GHC.Types.Char GHC.Base.String
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ GHC.Types.Char
                   @ GHC.Base.String
                   Main.main52) -}
9aee8a2d37db88d76a4e441e6da8ec0e
  main52 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'U'#) -}
648eed617d24c4aa1d4e02a12cfe284c
  main53 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main54) -}
79c60ea95b4f83c0df1ac1772946c4e0
  main54 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("U"#) -}
4c5bebdde108763e24b5cbead1309ef9
  main55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main56) -}
8f9ba254578fb76b4cf449124b68f688
  main56 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("correctly handles invalid input (RNA instead of DNA)"#) -}
a613f34b3f329b47c75e65355d2f4b3e
  main57 :: Data.Either.Either GHC.Types.Char [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ GHC.Types.Char
                   @ [GHC.Types.Char]
                   Main.main58) -}
77d897c057a19ef82d42e88b9fb1f5e5
  main58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main59) -}
9f3d71941b851e7b0a0d52470afae1aa
  main59 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("UGCACCAGAAUU"#) -}
2259a4a6bcf6a0eafba6c7970b74ab43
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main72
                   Main.main70
                   Main.main69
                   Main.main7
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
ce2423c49f1be3fcb377ca6c10c748b3
  main60 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main61) -}
3cbf6d85c1759f43907884b0ec837d32
  main61 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ACGTGGTCTTAA"#) -}
e55245df8812cc6233f0fe23aa393d9e
  main62 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main63) -}
a0c5a40295d7bc714e66b465dbe3891b
  main63 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RNA complement"#) -}
f68c77acd70463ddf9a3be0884098bee
  main64 :: Data.Either.Either GHC.Types.Char [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ GHC.Types.Char
                   @ [GHC.Types.Char]
                   Main.main53) -}
bcbe19802191f1e0c07045ea97d3733d
  main65 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main66) -}
94fd6a8aab99a1629f744beb0a6a8a3f
  main66 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("A"#) -}
d83ade2eba0e07bd3d329310cdbaebac
  main67 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main68) -}
bbf66bbfa42d1e9f42d2e57b4611ae94
  main68 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("RNA complement of adenine is uracil"#) -}
88a37d431f4279abc4d282d15e655750
  main69 :: Data.Either.Either GHC.Types.Char [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ GHC.Types.Char
                   @ [GHC.Types.Char]
                   Main.main65) -}
ebda572e841f6ef3aebacc1ec9674195
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main67
                   Main.main65
                   Main.main64
                   Main.main8
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
05e84a85e20105ec93bcfadd72e8a0da
  main70 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main71) -}
3067227d7b3a266cafcd180539d8a699
  main71 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("T"#) -}
9c3af788b20a7283a8206fce2a31225b
  main72 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main73) -}
6a59890174e89aa5e5e1c5a50e434493
  main73 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("RNA complement of thymine is adenine"#) -}
cda8671dba34e41c082326df0dcdcd1d
  main74 :: Data.Either.Either GHC.Types.Char [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ GHC.Types.Char
                   @ [GHC.Types.Char]
                   Main.main75) -}
d7bb068e31977e19d7329510c4e49ba8
  main75 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main76) -}
c2055211f87ce0e5fde98c5a234cae1c
  main76 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("C"#) -}
f740ef16d97bf239aa1d1d2810d7b0ad
  main77 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main78) -}
b2e1cd1ae4e87231d8bd6ae98390133f
  main78 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("G"#) -}
77f121ab8bd014b503a1bf2abcb23ab4
  main79 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main80) -}
f0926567307d1315109950c0db226be1
  main8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main62
                   Main.main60
                   Main.main57
                   Main.main9
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
b0ca2ca5ddce4156b5f4ba99f14fa5ff
  main80 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("RNA complement of guanine is cytosine"#) -}
b8708c00123ce57c1249ae04a510818c
  main81 :: Data.Either.Either GHC.Types.Char [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ GHC.Types.Char
                   @ [GHC.Types.Char]
                   Main.main77) -}
32379690a878bbb959471e84b805a172
  main82 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main83) -}
b331493d7077df2ae3f7a20dfe41c9e4
  main83 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("RNA complement of cytosine is guanine"#) -}
1d31a0b1a1fb7d625389d111d27a8a9a
  main84 :: Data.Either.Either GHC.Types.Char [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ GHC.Types.Char
                   @ [GHC.Types.Char]
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cf28bbb1266bae333537df7781cdc04a
  main85 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main86) -}
b07f36ea20a2a631c4353423cba39b28
  main86 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Empty RNA sequence"#) -}
e77ea5a49847d14a1751e518529a082f
  main87 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main88) -}
128c2216bfffe2fd2024e0be9f57ff51
  main88 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("toRNA"#) -}
33391c92f9e4d1d58eb46b7797a01817
  main89 ::
    GHC.Base.String
    -> Test.Hspec.Core.Spec.Monad.SpecWith ()
    -> Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Unfolding: (Test.Hspec.Core.Spec.describe
                   @ ()
                   Main.main90
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))) -}
66a29fc4cb7e359dddd11c8942444689
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main55
                   Main.main53
                   Main.main51
                   Main.main10
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
032f0e6d46ed94ef075f2954b61d6ce2
  main90 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main95
                   Main.main91
                   GHC.Stack.Types.EmptyCallStack) -}
a0cf57a0665df140481d68d0410cfb57
  main91 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main30
                   Main.main29
                   Main.main27
                   Main.main94
                   Main.main93
                   Main.main94
                   Main.main92) -}
f44c686e6c4fd4fb824685ed1baf0752
  main92 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 25#) -}
0b77f6aeaad02a3976e78b8f7dde52f9
  main93 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
391c2c8fe0b866acc290a323f41b123d
  main94 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 13#) -}
7d5753d8c6af32963fb8aba858b21715
  main95 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main96) -}
40e494e97356351c730f17c042ddd1ee
  main96 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("describe"#) -}
b3995387deb13608dad5148712c72295
  main97 :: Test.Hspec.Core.Config.Options.Config
  {- Unfolding: (Test.Hspec.Core.Config.Options.Config
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.True
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Test.Hspec.Core.Example.defaultParams1
                   Test.Hspec.Core.Config.Options.ColorAuto
                   GHC.Types.True
                   (GHC.Base.Nothing @ Test.Hspec.Core.Formatters.Monad.Formatter)
                   GHC.Types.False
                   Test.Hspec.Core.Config.Options.defaultConfig1
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
d273d56aa087e73ef978e1259513f679
  main98 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
"SPEC/Main $fEqEither @ Char @ [Char]" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                [GHC.Types.Char])
                                                       (v :: GHC.Classes.Eq GHC.Types.Char)
  Data.Either.$fEqEither @ GHC.Types.Char @ [GHC.Types.Char] v v1
  = Main.$s$fEqEither
"SPEC/Main $fEqEither_$c/= @ Char @ [Char]" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                        [GHC.Types.Char])
                                                            ($dEq :: GHC.Classes.Eq GHC.Types.Char)
  Data.Either.$fEqEither_$c/= @ GHC.Types.Char
                              @ [GHC.Types.Char]
                              $dEq
                              $dEq1
  = Main.$s$fEqEither_$s$fEqEither_$c/=
"SPEC/Main $fShowEither @ Char @ [Char]" [orphan] forall (v1 :: GHC.Show.Show
                                                                  [GHC.Types.Char])
                                                         (v :: GHC.Show.Show GHC.Types.Char)
  Data.Either.$fShowEither @ GHC.Types.Char @ [GHC.Types.Char] v v1
  = Main.$s$fShowEither
"SPEC/Main $fShowEither_$cshowList @ Char @ [Char]" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                  [GHC.Types.Char])
                                                                    ($dShow :: GHC.Show.Show
                                                                                 GHC.Types.Char)
  Data.Either.$fShowEither_$cshowList @ GHC.Types.Char
                                      @ [GHC.Types.Char]
                                      $dShow
                                      $dShow1
  = Main.$s$fShowEither_$cshowList
"SPEC/Main $fShowEither_$cshowsPrec @ Char @ [Char]" [orphan] [0] forall (w1 :: GHC.Show.Show
                                                                                  [GHC.Types.Char])
                                                                         (w :: GHC.Show.Show
                                                                                 GHC.Types.Char)
  Data.Either.$fShowEither_$cshowsPrec @ GHC.Types.Char
                                       @ [GHC.Types.Char]
                                       w
                                       w1
  = Main.$s$fShowEither_$cshowsPrec
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

