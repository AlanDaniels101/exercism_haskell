
==================== FINAL INTERFACE ====================
2019-05-02 21:23:48.9333418 UTC

interface grade-school-1.0.0.4-323cqV80LDXIQAUEUcFbKy:School 8043
  interface hash: dd39db59d5a16ab9f187282dc85ae3c3
  ABI hash: 26d17c40920d0897824a92863cfdc532
  export-list hash: 1993a983c5a5779f898fdc9a2c667f06
  orphan hash: 430b1a417787052faaea2ee878aa9ee7
  flag hash: 0527c515cada2cc2079fef10aa370e66
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  School.add
  School.empty
  School.grade
  School.sorted
  School.School
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0*
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Set.Internal
import  -/  base-4.11.1.0:Data.List cb78ca5eace70fd310936fda86b3e611
import  -/  base-4.11.1.0:Data.OldList 3987872d5de68d40c22cd1c30825ad08
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.List 95910b50fba2204d1a3364fe070ebf2b
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  containers-0.5.11.0:Data.Map 1fa9f25d51fe9f60b440e141f6d7bf14
import  -/  containers-0.5.11.0:Data.Map.Internal a2314ee57e16ff1fe3af08500b455e81
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
51c4bb0edd99ea600c72d7fd080e7af0
  $sfromList ::
    [(GHC.Types.Int, a)] -> Data.Map.Internal.Map GHC.Types.Int a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(GHC.Types.Int, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ GHC.Types.Int @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { GHC.Types.I# ipv ->
                           Data.Map.Internal.Bin
                             @ GHC.Types.Int
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ GHC.Types.Int @ a)
                             (Data.Map.Internal.Tip @ GHC.Types.Int @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.I# x1 ->
                           case ky of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.>=# x1 y of lwild {
                             DEFAULT
                             -> School.$wpoly_go13
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ GHC.Types.Int
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Internal.Tip @ GHC.Types.Int @ a)
                                     (Data.Map.Internal.Tip @ GHC.Types.Int @ a))
                                  wild2
                             1#
                             -> School.$sfromList1
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ GHC.Types.Int
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Internal.Tip @ GHC.Types.Int @ a)
                                     (Data.Map.Internal.Tip @ GHC.Types.Int @ a))
                                  wild2 } } } } } } }) -}
83556b05dada34cee6ac9fa7515d2450
  $sfromList1 ::
    Data.Map.Internal.Map GHC.Types.Int a
    -> [(GHC.Types.Int, a)] -> Data.Map.Internal.Map GHC.Types.Int a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
25fcd3c4ebb56d0c483f34ee1317e608
  $sinsertWith_$sgo13 ::
    (a1 -> a1 -> a1)
    -> GHC.Types.Int
    -> a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
  {- Arity: 4, Strictness: <L,1*C1(C1(U))><S(S),1*U(U)><L,U><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a1
                   (w :: a1 -> a1 -> a1)
                   (w1 :: GHC.Types.Int)
                   (w2 :: a1)
                   (w3 :: Data.Map.Internal.Map GHC.Types.Int a1) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 School.$w$sgo1 @ a1 w ww1 w2 w3 }) -}
0003b99224720796e266d0f4bbb214e9
  $slookup1 ::
    GHC.Types.Int
    -> Data.Map.Internal.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: GHC.Types.Int)
                   (w1 :: Data.Map.Internal.Map GHC.Types.Int a) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 School.$wpoly_go1 @ a ww1 w1 }) -}
afb8f8fba42571efcdb20196131205fe
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   School.$trModule3
                   School.$trModule1) -}
220ddeb1eaef55af4d68d6c1029f400d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS School.$trModule2) -}
db3c0122f995f7655a4c885f81ac8f3a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("School"#) -}
951ea65852b09b0bef8095e0b1b7766d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS School.$trModule4) -}
d934bfbf2795ad95c1d1d79a6e9000c5
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("grade-school-1.0.0.4-323cqV80LDXIQAUEUcFbKy"#) -}
9c7b1c69dc6484b37cf422fe19c0cf43
  $w$sgo1 ::
    (a1 -> a1 -> a1)
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
  {- Arity: 4, Strictness: <L,1*C1(C1(U))><L,U><L,U><S,1*U>,
     Inline: [0] -}
4f25442363b62b304db05481bb38268c
  $w$sgo13 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
3e88a6d4376152f0ae96ff26e56d28f1
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
e50e4f296fe01352b92891bd0ea98534
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Types.Int a
    -> [(GHC.Types.Int, a)]
    -> Data.Map.Internal.Map GHC.Types.Int a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
4929e966b0fe224ac8dce9e0ebd46fec
  type School = Data.Map.Internal.Map GHC.Types.Int [GHC.Base.String]
ebbac25b2a7463168d9035a0fe892646
  add ::
    GHC.Types.Int -> GHC.Base.String -> School.School -> School.School
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (gradeNum :: GHC.Types.Int)
                   (student :: GHC.Base.String)
                   (school :: School.School) ->
                 School.$sinsertWith_$sgo13
                   @ [GHC.Base.String]
                   School.add1
                   gradeNum
                   (GHC.Types.:
                      @ GHC.Base.String
                      student
                      (GHC.Types.[] @ GHC.Base.String))
                   school) -}
dc9f447536f3c119bc544dc7a2b0758c
  add1 :: [GHC.Base.String] -> [GHC.Base.String] -> [GHC.Base.String]
  {- Arity: 2, Strictness: <L,1*U><S,1*U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (new :: [GHC.Base.String])[OneShot]
                   (xs :: [GHC.Base.String])[OneShot] ->
                 case Data.OldList.$winsertBy
                        @ GHC.Base.String
                        GHC.Classes.$fOrd[]_$s$ccompare1
                        (GHC.List.$w!! @ GHC.Base.String new 0#)
                        xs of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Base.String ww1 ww2 }) -}
437c5caad216604ee63346c40dfad61a
  empty :: School.School
  {- Unfolding: (School.$sfromList
                   @ [GHC.Base.String]
                   (GHC.Types.[] @ (GHC.Types.Int, [GHC.Base.String]))) -}
757b214f632f814fcab339383712c1d1
  grade :: GHC.Types.Int -> School.School -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (gradeNum :: GHC.Types.Int) (school :: School.School) ->
                 case School.$slookup1 @ [GHC.Base.String] gradeNum school of wild {
                   GHC.Base.Nothing -> GHC.Types.[] @ GHC.Base.String
                   GHC.Base.Just students -> students }) -}
bf65f6bdbd5a852f5dc2576f55ed4054
  sorted :: School.School -> [(GHC.Types.Int, [GHC.Base.String])]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (Data.Map.Internal.toAscList
                   @ GHC.Types.Int
                   @ [GHC.Base.String]) -}
"SPEC/School fromList @ Int _" [orphan] forall @ a
                                               ($dOrd :: GHC.Classes.Ord GHC.Types.Int)
  Data.Map.Internal.fromList @ GHC.Types.Int @ a $dOrd
  = School.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

