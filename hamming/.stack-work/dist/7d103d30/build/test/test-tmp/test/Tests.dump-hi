
==================== FINAL INTERFACE ====================
2019-02-19 03:33:34.2594985 UTC

interface main:Main 8043
  interface hash: 8d6767302c43b1c43232114cbb47ee97
  ABI hash: f64e944d001f79cf3629649fc84f3be2
  export-list hash: f20aef487e65f18d97f5dc91c7fd0b01
  orphan hash: 917a9098b62e42214800726732fbb310
  flag hash: 8aab0c017873a3054971c6e5433a63ec
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.11.3 Win32-2.6.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 base-4.11.1.0
                      bytestring-0.10.8.2 call-stack-0.1.0 clock-0.7.2 colour-2.3.4
                      containers-0.5.11.0 deepseq-1.4.3.0 directory-1.3.1.5
                      filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hamming-2.3.0.10
                      hspec-2.5.5 hspec-core-2.5.5 hspec-expectations-0.8.2
                      integer-gmp-1.0.2.0 mintty-0.1.2 pretty-1.1.3.6 primitive-0.6.3.0
                      quickcheck-io-0.2.0 random-1.1 setenv-0.1.1.3 stm-2.4.5.0
                      template-haskell-2.13.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.5.0
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         hspec-core-2.5.5:Test.Hspec.Core.Example
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.11.1.0:Data.Foldable 6cf3e918f22d03c0870804f05cd183d1
import  -/  base-4.11.1.0:Data.Functor 920435f8ff93fffe1aec86c79e4fd45f
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.Real 032ed0a1053f878238d78e95e75f2edf
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  hamming-2.3.0.10:Hamming 45c3477c02f0ab5261e6dc67af605644
import  -/  hspec-2.5.5:Test.Hspec 54df06f5d545fec5f91cea5cb55c0ae8
import  -/  hspec-2.5.5:Test.Hspec.Runner 9fe7f63f5e6ed51f346724e5e71cfbc5
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Config.Options 44eafedded707b18de0b18ece30e85fc
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Runner aacfbe7ef9810029c809d32d98b97f0a
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec c73480f52a618942c509ac8e85ded21d
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec.Monad e5e9ce617af58e105519cbbabb1c58c0
import  -/  hspec-expectations-0.8.2:Test.Hspec.Expectations 40271346c6df10d72d14c4ff3ae952ea
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 6713f4457912bac968474ebbf062cd01
0a6c6f118ad298629aac32862dd7b81d
  $s$fEqMaybe :: GHC.Classes.Eq (GHC.Base.Maybe GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GHC.Types.Int)
                  (\ (ds :: GHC.Base.Maybe GHC.Types.Int)
                     (ds1 :: GHC.Base.Maybe GHC.Types.Int) ->
                   case ds of wild {
                     GHC.Base.Nothing
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a1
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1 -> GHC.Classes.eqInt a1 b1 } })
                  Main.$s$fEqMaybe_$s$fEqMaybe_$c/= -}
a6af794a94b016ec929e52eceea1d1ea
  $s$fEqMaybe_$c== ::
    GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe GHC.Types.Int)
                   (ds1 :: GHC.Base.Maybe GHC.Types.Int) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> GHC.Classes.eqInt a1 b1 } }) -}
74d7a6a2dfd29c7ffb661f8794b32b50
  $s$fEqMaybe_$s$fEqMaybe_$c/= ::
    GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: GHC.Base.Maybe GHC.Types.Int)
                   (y :: GHC.Base.Maybe GHC.Types.Int) ->
                 case x of wild {
                   GHC.Base.Nothing
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a1
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just b1
                        -> case GHC.Classes.eqInt a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
1a04ebe0b9affdb91cd4506e7ed9cb35
  $s$fShowMaybe :: GHC.Show.Show (GHC.Base.Maybe GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GHC.Types.Int)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt)
                  (\ (x :: GHC.Base.Maybe GHC.Types.Int) ->
                   case x of wild {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n GHC.Show.$fShowMaybe1)
                          (GHC.Show.showSignedInt
                             GHC.Show.appPrec1
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [GHC.Base.Maybe GHC.Types.Int]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe GHC.Types.Int)
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ GHC.Types.Int
                        GHC.Show.$fShowInt
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
c4e2e0d3349799d8b57e6707c13a27fa
  $s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe GHC.Types.Int] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GHC.Base.Maybe GHC.Types.Int]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe GHC.Types.Int)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ GHC.Types.Int
                      GHC.Show.$fShowInt
                      GHC.Show.$fShow(,)1)
                   ls
                   s) -}
8f470deca0048d02e6fc8121ab8abb17
  $tc'Case :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8197111133229858407##
                   13847006553897280588##
                   Main.$trModule
                   Main.$tc'Case2
                   0#
                   Main.$tc'Case1) -}
6fc21dd8b35ae7df9abfcd56a3c1f8ad
  $tc'Case1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0c0299238ee13fbc2e14231d59357ec9
  $tc'Case2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Case3) -}
b70b9a2f50a01b383c0fc203a93b45f6
  $tc'Case3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Case"#) -}
9f9427b68a1c0df6b95c3a3d566064e4
  $tcCase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   990021888930651814##
                   4262142848388084561##
                   Main.$trModule
                   Main.$tcCase1
                   0#
                   GHC.Types.krep$*) -}
b0dff1fba9a2e1fbd8ccfcfdc7bfd5cc
  $tcCase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCase2) -}
7179be3aa9b5f07778c569f16b1ed2bf
  $tcCase2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Case"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
9d99891481d912e7fe98267792f3bc3f
  $wc ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.Maybe GHC.Integer.Type.Integer
    -> Control.Monad.Trans.Writer.Lazy.WriterT
         [Test.Hspec.Core.Tree.SpecTree ()] GHC.Types.IO ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 6,
     Strictness: <L,1*U><L,U><L,U><L,U><C(S(SL)),1*C1(U(U,U(1*U,1*U)))><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.Maybe GHC.Integer.Type.Integer)
                   (w :: Control.Monad.Trans.Writer.Lazy.WriterT
                           [Test.Hspec.Core.Tree.SpecTree ()] GHC.Types.IO ())
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                           <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                           <GHC.Types.IO>_R
                           <()>_N ; GHC.Types.N:IO[0]
                                        <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R)
                        w1 of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (case ipv3 of wild1 { (,) b1 w' -> b1 },
                     GHC.Base.++
                       @ (Test.Hspec.Core.Tree.Tree
                            (Test.Hspec.Core.Example.ActionWith ())
                            (Test.Hspec.Core.Tree.Item ()))
                       (GHC.Types.:
                          @ (Test.Hspec.Core.Tree.SpecTree
                               (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                          (Test.Hspec.Core.Tree.Leaf
                             @ (Test.Hspec.Core.Example.ActionWith
                                  (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                             @ (Test.Hspec.Core.Tree.Item
                                  (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                             (Test.Hspec.Core.Tree.Item
                                @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                                (case ww of wild {
                                   []
                                   -> case Main.main42 of wild1 {
                                        GHC.Base.Nothing -> Test.Hspec.Core.Tree.specItem1
                                        GHC.Base.Just v -> v }
                                   : ds2 ds3 -> wild })
                                Main.main31
                                (GHC.Base.Nothing @ GHC.Types.Bool)
                                (Test.Hspec.Core.Example.safeEvaluateExample1
                                   @ Test.Hspec.Expectations.Expectation
                                   Test.Hspec.Core.Example.$fExampleIO1
                                     `cast`
                                   ((<Test.Hspec.Expectations.Expectation>_R
                                     ->_R <Test.Hspec.Core.Example.Params>_R
                                     ->_R <(Test.Hspec.Core.Example.Arg
                                              Test.Hspec.Expectations.Expectation
                                            -> GHC.Types.IO ())
                                           -> GHC.Types.IO ()>_R
                                     ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Test.Hspec.Core.Example.Result>_R)) ; Sym (Test.Hspec.Core.Example.N:Example[0]
                                                                                                   <Test.Hspec.Expectations.Expectation>_N))
                                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                    Test.HUnit.Lang.assertEqual1
                                      @ (GHC.Base.Maybe GHC.Types.Int)
                                      Main.main18
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                      Main.$s$fEqMaybe
                                      Main.$s$fShowMaybe
                                      (GHC.Types.[] @ GHC.Types.Char)
                                      (case ww3 of wild {
                                         GHC.Base.Nothing -> GHC.Base.Nothing @ GHC.Types.Int
                                         GHC.Base.Just a1
                                         -> GHC.Base.Just
                                              @ GHC.Types.Int
                                              (case GHC.Integer.Type.integerToInt
                                                      a1 of wild1 { DEFAULT ->
                                               GHC.Types.I# wild1 }) })
                                      (Hamming.distance ww1 ww2)
                                      eta2)
                                     `cast`
                                   (Sym (GHC.Types.N:IO[0] <()>_R)))
                                  `cast`
                                (<Test.Hspec.Core.Example.Params>_R
                                 ->_R <Test.Hspec.Core.Example.ActionWith
                                         (Test.Hspec.Core.Example.Arg
                                            Test.Hspec.Expectations.Expectation)
                                       -> GHC.Types.IO ()>_R
                                 ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                 ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))))
                          (GHC.Types.[]
                             @ (Test.Hspec.Core.Tree.SpecTree
                                  (Test.Hspec.Core.Example.Arg
                                     Test.Hspec.Expectations.Expectation))))
                         `cast`
                       ([(Test.Hspec.Core.Tree.Tree
                            (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                             ->_R <GHC.Types.IO ()>_R)
                            (Test.Hspec.Core.Tree.Item
                               (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                       (case ipv3 of wild { (,) b1 w' -> w' })) #) }) -}
767cefc810c8b397431add128e9c238e
  data Case
    = Case {description :: GHC.Base.String,
            strand1 :: GHC.Base.String,
            strand2 :: GHC.Base.String,
            expected :: GHC.Base.Maybe GHC.Integer.Type.Integer}
767cefc810c8b397431add128e9c238e
  description :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 ds4 -> ds1 }) -}
767cefc810c8b397431add128e9c238e
  expected :: Main.Case -> GHC.Base.Maybe GHC.Integer.Type.Integer
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 ds4 -> ds4 }) -}
add2bc94158dd805e3b34d44c4c52872
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
507c730206af2edf8e04a49f4d537c4b
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.Hspec.Core.Runner.hspec2
                        Main.main96
                        Main.main2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.exitFailure1 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
bcd9ee6a31ec6155b45274a4d988a22e
  main10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main46
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main14
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   Main.main11
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
0306e9efd54559fe660fd4992d8d18f1
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main16
                   Main.main14
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   Main.main12
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
2ba791655b1d615c643441ff27efa999
  main12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.main13 #)) -}
f1dadfb9e7853cb9df2687b78475ddda
  main13 :: ((), [Test.Hspec.Core.Tree.SpecTree ()])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Tuple.(),
                  GHC.Types.[]
                    @ (Test.Hspec.Core.Tree.Tree
                         (Test.Hspec.Core.Example.ActionWith ())
                         (Test.Hspec.Core.Tree.Item ())))) -}
7ce0c765abd5987acf405ab6e92ce7fa
  main14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main15) -}
b520da43a2ae7d36b401697a32ddef00
  main15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("G"#) -}
2565874a46a6c40e00cf945b80cc2442
  main16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main17) -}
203e85bc2848ff199712bf1f68dbf9d7
  main17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("disallow right empty strand"#) -}
fa4317cf1c28ecc5729155e1c86052a8
  main18 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?6
                   Test.HUnit.Base.@?=2
                   Main.main19) -}
f66ab2b026ac134295478bca46fa21d5
  main19 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe6
                   Test.Hspec.Expectations.shouldBe2
                   Main.main20) -}
8e8bc685e67fa7a2e473f4f8a385e428
  main2 :: Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Unfolding: (Main.main88
                   Main.main86
                   Main.main3
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                       <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                       <GHC.Types.IO>_R
                                                       <()>_N) ; Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N) <()>_N))) -}
d007b399cc4d13ffd25f8ac00133b4b4
  main20 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main29
                   Main.main21
                   GHC.Stack.Types.EmptyCallStack) -}
056a768c6400af8e469e2e78fc3400d4
  main21 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main28
                   Main.main27
                   Main.main25
                   Main.main24
                   Main.main23
                   Main.main24
                   Main.main22) -}
43a638e096cd3f049cf6269883f0c705
  main22 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 69#) -}
ed020673c8ade71b69b15b22c1e0cecf
  main23 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 22#) -}
5ef06ff922fe28d10d8c47042e3732bb
  main24 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 19#) -}
f062652f737d9916904949673c3b2620
  main25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main26) -}
7c0ca043c37d5bd854a164483d94b73b
  main26 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test\\Tests.hs"#) -}
2a59e8401e04dfb6807922cd98609c4b
  main27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule2) -}
3b7e3f6eac17d39321d7411ecb0a9fdb
  main28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule4) -}
a2645253ef41f6e9a3b021c9a7e28182
  main29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main30) -}
deb772559b30bb08a0eb856e5a3801f1
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Main.$wc
                   Main.main84
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.main68
                   Main.main4
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
f2eadb08c786ba8ca463991e512dd055
  main30 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("shouldBe"#) -}
84ff9b1932847b45ad3bb997d5b51e8f
  main31 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location.Location
  {- Unfolding: (Test.Hspec.Core.Tree.location11 Main.main32) -}
c360f6200d886e2b82fa6301c02bd4e9
  main32 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.location9
                   Test.Hspec.Core.Tree.location1
                   Main.main33) -}
d434ab2a8280b5cdad29ca31006d3020
  main33 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem14
                   Test.Hspec.Core.Tree.specItem11
                   Main.main34) -}
2c1582eea3730ee8b9e3438c10d859fe
  main34 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it6
                   Test.Hspec.Core.Spec.it2
                   Main.main35) -}
fda44f42a2335c12523fe6a84de041b8
  main35 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main40
                   Main.main36
                   GHC.Stack.Types.EmptyCallStack) -}
1874f7267e5d158d7a9630d08840da3b
  main36 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main28
                   Main.main27
                   Main.main25
                   Main.main39
                   Main.main38
                   Main.main39
                   Main.main37) -}
f20fe3225fb446c6ed54aa93d2c7adc7
  main37 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 45#) -}
037c73567ae4c9bb7e6a35f336c14be1
  main38 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 21#) -}
771f2d836fea8a74561b61631f56ba99
  main39 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 17#) -}
6d847656598cc22e0d94ebff3edbb0d3
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main82
                   Main.main80
                   Main.main80
                   Main.main68
                   Main.main5
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
330e0c33890030874da2940af7b7a5d2
  main40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main41) -}
d880d697ec075ab8dcda595287a5b0fd
  main41 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("it"#) -}
11c560ac758246490b5ee33e338ebd07
  main42 :: GHC.Base.Maybe GHC.Base.String
  {- Unfolding: (Test.Hspec.Core.Tree.specGroup19 Main.main43) -}
914d1559f698e76c381056e7620a1e85
  main43 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.location9
                   Test.Hspec.Core.Tree.specGroup15
                   Main.main44) -}
e09c68987c042117ff45ae243b341f31
  main44 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specGroup13
                   Test.Hspec.Core.Tree.specItem9
                   Main.main45) -}
585984b7102ac9ae1048cd49d3861fcb
  main45 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem7
                   Test.Hspec.Core.Tree.specItem3
                   Main.main34) -}
be1fe865b91409fd149ccead5a8bb46f
  main46 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main47) -}
d1d2f69397a5a818d282cef096f3a299
  main47 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("disallow left empty strand"#) -}
78305e41c69aadca6cc186cde8a8f51b
  main48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main49) -}
4705b37cb3ec5bd62cccf8eb725fa3ab
  main49 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AGTG"#) -}
ebe4762597baace3ae887a6e6db1a1be
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main78
                   Main.main14
                   Main.main76
                   Main.main74
                   Main.main6
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
78900d6296acb60e19e2af004f988025
  main50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main51) -}
fd2a05d4decbf19268ddd085f0735e46
  main51 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ATA"#) -}
380d83ac92cefac1f69409a63ea98d82
  main52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main53) -}
076bdb4892a9abf6431209b07db69326
  main53 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("disallow second strand longer"#) -}
a49745fcd6d297a134b766e69f5a5362
  main54 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main55) -}
d32f40caa5b495bfb8438e97e6f6a15f
  main55 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AAA"#) -}
dbb131cccd84555b92274bffde3a7e45
  main56 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main57) -}
ba469258994d1712de6305fc944db1a7
  main57 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AATG"#) -}
e7728a854ce00500bc6caeeb5ddb76ef
  main58 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main59) -}
b85be6933bbde2b382694172b0f5cda9
  main59 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("disallow first strand longer"#) -}
524cc17587e15406579b4c714d36fca4
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main72
                   Main.main70
                   Main.main70
                   Main.main68
                   Main.main7
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
b2f91fbd88f4ba0216795c6644cdb161
  main60 :: GHC.Base.Maybe GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Integer.Type.Integer
                   Main.main61) -}
b559aa071529cfa3c8fbc7571ecc87e2
  main61 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (9) -}
cab3464e60388368b719a287e3040bd9
  main62 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main63) -}
9a50a967a6fc4003b2bb70f40ba18c62
  main63 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AGGACGGATTCT"#) -}
317659f6944fb4614b2b9988f1c86785
  main64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main65) -}
1a44e94dc0e643014f26307577390111
  main65 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GGACGGATTCTG"#) -}
50f4bd0785fe909bd37247c68402ea4a
  main66 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main67) -}
db2117ab61b0ed95ea1cd19206e151cf
  main67 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("long different strands"#) -}
a695a8a3f2bc904e7be3620465725f35
  main68 :: GHC.Base.Maybe GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Integer.Type.Integer
                   Main.main69) -}
4ace5562c421765a5c7399616263afd6
  main69 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
e1a9448ab55f5bc51bcfcc93c1414f93
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main66
                   Main.main64
                   Main.main62
                   Main.main60
                   Main.main8
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
258c1bdc3fdd8f16eea0c69906e912d5
  main70 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main71) -}
d401f8fbbaa94e40d1cdbe77e577408b
  main71 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GGACTGAAATCTG"#) -}
8a1965f0038343423fdf0cc81ef76508
  main72 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main73) -}
a41b97df744da608c6aff44381f1bf7b
  main73 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("long identical strands"#) -}
6bd64f9b32495d5d0b44a013b18d3711
  main74 :: GHC.Base.Maybe GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Integer.Type.Integer
                   Main.main75) -}
9ae6dac04bd47a36262e80ccb5ea07a7
  main75 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
89147ae7d4b6a45c4d3dce5345f365ec
  main76 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main77) -}
4fb5104da33d7c5c2ee23a7f6e991e22
  main77 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("T"#) -}
af15fb2a67e2357d5681d890fcfc7f5b
  main78 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main79) -}
90eef41aa9793bdc4b7ba351961a4c12
  main79 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("single letter different strands"#) -}
116b1d13499c4b870b388ed2e27804ca
  main8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main58
                   Main.main56
                   Main.main54
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   Main.main9
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
fbfa8a5165ce26d52188a68b0fa215f1
  main80 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main81) -}
8a74b667a5ba44590c1d4428a3c48b76
  main81 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("A"#) -}
6574c16b07bfe13fdb5e0c47528e84ca
  main82 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main83) -}
4293e38c157c790c2e93f6cca3b32c96
  main83 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("single letter identical strands"#) -}
98d91f3a88ad336f750684167a386bec
  main84 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main85) -}
51dfd47b1eb908a151d19e87de4d0ac3
  main85 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("empty strands"#) -}
be45040b24317c6c5e44b539d3a9db99
  main86 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main87) -}
6ea8b7f7950723f679839d1c2838bea1
  main87 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("distance"#) -}
70a2d47696dcd46ff5f8806f786acef9
  main88 ::
    GHC.Base.String
    -> Test.Hspec.Core.Spec.Monad.SpecWith ()
    -> Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Unfolding: (Test.Hspec.Core.Spec.describe
                   @ ()
                   Main.main89
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))) -}
a576b2ee36b95554087a82b3163f2c55
  main89 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main94
                   Main.main90
                   GHC.Stack.Types.EmptyCallStack) -}
c075830eff1c48a810f8bf1aceab6ce4
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main52
                   Main.main50
                   Main.main48
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   Main.main10
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
93de174b578d858dedb2f25c31840a87
  main90 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main28
                   Main.main27
                   Main.main25
                   Main.main93
                   Main.main92
                   Main.main93
                   Main.main91) -}
dce01bdb0b58f4a00453d22724b7d77e
  main91 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 28#) -}
d2efdbfed8b00c2cce2778dea3cc54f1
  main92 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
052eb5127797ef651d229418205d99d0
  main93 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 14#) -}
230bcdbbded70474d0794172ad6a958f
  main94 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main95) -}
f1389b7d26781759787d0e39c1968189
  main95 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("describe"#) -}
da336bb6f49266c88b3c9d6c4d05cfa9
  main96 :: Test.Hspec.Core.Config.Options.Config
  {- Unfolding: (Test.Hspec.Core.Config.Options.Config
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.True
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Test.Hspec.Core.Example.defaultParams1
                   Test.Hspec.Core.Config.Options.ColorAuto
                   GHC.Types.True
                   (GHC.Base.Nothing @ Test.Hspec.Core.Formatters.Monad.Formatter)
                   GHC.Types.False
                   Test.Hspec.Core.Config.Options.defaultConfig1
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
57cf35c9e054851b87c301981177c891
  main97 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
767cefc810c8b397431add128e9c238e
  strand1 :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 ds4 -> ds2 }) -}
767cefc810c8b397431add128e9c238e
  strand2 :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 ds4 -> ds3 }) -}
"SPEC/Main $fEqMaybe @ Int" [orphan] forall (v :: GHC.Classes.Eq
                                                    GHC.Types.Int)
  GHC.Base.$fEqMaybe @ GHC.Types.Int v = Main.$s$fEqMaybe
"SPEC/Main $fEqMaybe_$c/= @ Int" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                            GHC.Types.Int)
  GHC.Base.$fEqMaybe_$c/= @ GHC.Types.Int $dEq
  = Main.$s$fEqMaybe_$s$fEqMaybe_$c/=
"SPEC/Main $fEqMaybe_$c== @ Int" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                            GHC.Types.Int)
  GHC.Base.$fEqMaybe_$c== @ GHC.Types.Int $dEq
  = Main.$s$fEqMaybe_$c==
"SPEC/Main $fShowMaybe @ Int" [orphan] forall (v :: GHC.Show.Show
                                                      GHC.Types.Int)
  GHC.Show.$fShowMaybe @ GHC.Types.Int v = Main.$s$fShowMaybe
"SPEC/Main $fShowMaybe_$cshowList @ Int" [orphan] forall ($dShow :: GHC.Show.Show
                                                                      GHC.Types.Int)
  GHC.Show.$fShowMaybe_$cshowList @ GHC.Types.Int $dShow
  = Main.$s$fShowMaybe_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

