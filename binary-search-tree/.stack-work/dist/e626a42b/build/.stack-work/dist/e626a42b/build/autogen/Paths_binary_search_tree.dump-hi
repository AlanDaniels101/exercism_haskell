
==================== FINAL INTERFACE ====================
2019-10-22 20:06:07.3678417 UTC

interface binary-search-tree-1.0.0.4-HpmOUFWbmND6AdF1IWOLFA:Paths_binary_search_tree 8065
  interface hash: 00d0636638b487aff96432e32cc9650c
  ABI hash: 4cc202c88c3afd19f4db725a171cbf9b
  export-list hash: 3833af38739811b8a5c886d0bdd462e8
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8008335b6c7f9184fc3749d6bfa27766
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Paths_binary_search_tree.getBinDir
  Paths_binary_search_tree.getDataDir
  Paths_binary_search_tree.getDataFileName
  Paths_binary_search_tree.getDynLibDir
  Paths_binary_search_tree.getLibDir
  Paths_binary_search_tree.getLibexecDir
  Paths_binary_search_tree.getSysconfDir
  Paths_binary_search_tree.version
module dependencies:
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Control.Exception 68d632685955b01899aa782b05b79cdf
import  -/  base-4.12.0.0:Data.Version 3fc9a28dff258573273513c608375452
import  -/  base-4.12.0.0:GHC.Base fbe365a916ebeeeb4bc1f895dbe83e42
import  -/  base-4.12.0.0:GHC.IO caa7ca94733978776c4f954a05ccc347
import  -/  base-4.12.0.0:GHC.IO.Exception 99271e07ec0e09b76d45c79794dad266
import  -/  base-4.12.0.0:Prelude 80c668cb99fbafebd524c5e897f8c982
import  -/  base-4.12.0.0:System.Environment 045df705c1f205b31d24a0f6340ea2db
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
addDependentFile "C:\Users\aland\AppData\Local\Programs\stack\x86_64-windows\ghc-8.6.5\lib\include\ghcversion.h" 43db44f9bb88490c2fa995e5f5ec33f2
addDependentFile ".stack-work\dist\e626a42b\build\autogen\cabal_macros.h" 6b7cc4d577ad8bba903d41b4107b0436
c1915f2675bdff6000d1ba809f780beb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Paths_binary_search_tree.$trModule3
                   Paths_binary_search_tree.$trModule1) -}
83e68236a693619e9aad77e91ae8e3e0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Paths_binary_search_tree.$trModule2) -}
d610c30dc90a6c1e4771f95f1d55eb20
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Paths_binary_search_tree"#) -}
4de38fe4ab09fbb9f9f08272b5752cc3
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Paths_binary_search_tree.$trModule4) -}
48f5c588db26c102fb1f3ae02a2f68cb
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("binary-search-tree-1.0.0.4-HpmOUFWbmND6AdF1IWOLFA"#) -}
d535a64fbae18866943003802751ebdb
  getBinDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_binary_search_tree.getBinDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
4c4de5dc90656a7eeffb215ad8a9da5a
  getBinDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_binary_search_tree.getBinDir5
                   Paths_binary_search_tree.getBinDir2
                   eta) -}
a445eb4d481cfc1f0a476ca77e2d351f
  getBinDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True
                   -> (# eta, Paths_binary_search_tree.getBinDir3 #) } }) -}
8729d4213ccda661adda669f4b1f00a1
  getBinDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_binary_search_tree.getBinDir4) -}
469c0594c2db4cd31067e11137a4561b
  getBinDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("C:\\Users\\aland\\Exercism\\haskell\\binary-search-tree\\.stack-work\\install\\072e9945\\bin"#) -}
48ad4b6a89543ab76f6265898e32bb2e
  getBinDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Environment.getEnv5
                        Paths_binary_search_tree.getBinDir6
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Maybe.Nothing
                   -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.State#
                                                        GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Prim.Word# #)}
                             ipv of wild1 { (#,#) ds ds2 ->
                      case GHC.Prim.narrow32Word# ds2 of wild2 {
                        DEFAULT
                        -> GHC.Windows.failIf2
                             @ GHC.Base.String
                             System.Environment.getEnv3
                             ds
                        203##
                        -> System.Environment.getEnv2
                             Paths_binary_search_tree.getBinDir6
                             ds } }
                   GHC.Maybe.Just x -> (# ipv, x #) } }) -}
57e84e02736c3e14586d19fb79cb38f7
  getBinDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_binary_search_tree.getBinDir7) -}
9b8e85bf5502ac14f6aa2f4b9e074a8d
  getBinDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("binary_search_tree_bindir"#) -}
8c6755709337cfbc443dc7f5530fd922
  getDataDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_binary_search_tree.getDataDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
c20df7d8f3453325c788ba6258a1a2d3
  getDataDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_binary_search_tree.getDataDir5
                   Paths_binary_search_tree.getDataDir2
                   eta) -}
30a748907c69386d6da19ed8d2f72dde
  getDataDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True
                   -> (# eta, Paths_binary_search_tree.getDataDir3 #) } }) -}
37b963ee1aaccf0f240504e6e4b474ca
  getDataDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_binary_search_tree.getDataDir4) -}
c9a85ed7b2ff557e8235ea2122c59ebc
  getDataDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("C:\\Users\\aland\\Exercism\\haskell\\binary-search-tree\\.stack-work\\install\\072e9945\\share\\x86_64-windows-ghc-8.6.5\\binary-search-tree-1.0.0.4"#) -}
43efbf72c5bb20787b87881340949f86
  getDataDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Environment.getEnv5
                        Paths_binary_search_tree.getDataDir6
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Maybe.Nothing
                   -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.State#
                                                        GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Prim.Word# #)}
                             ipv of wild1 { (#,#) ds ds2 ->
                      case GHC.Prim.narrow32Word# ds2 of wild2 {
                        DEFAULT
                        -> GHC.Windows.failIf2
                             @ GHC.Base.String
                             System.Environment.getEnv3
                             ds
                        203##
                        -> System.Environment.getEnv2
                             Paths_binary_search_tree.getDataDir6
                             ds } }
                   GHC.Maybe.Just x -> (# ipv, x #) } }) -}
47ea98c91d1ccf4f2b6fcc7ffe154692
  getDataDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_binary_search_tree.getDataDir7) -}
8a0f1e2b171c5b141e82e0d414adbca4
  getDataDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("binary_search_tree_datadir"#) -}
e49d31c3d037336cc8ff63f8a5e6e88f
  getDataFileName :: GHC.IO.FilePath -> GHC.Types.IO GHC.IO.FilePath
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_binary_search_tree.getDataFileName1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.IO.FilePath>_R)) -}
867fd22cc99f2cdbed2ebac7cbce5f96
  getDataFileName1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FilePath #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (name :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.Type.SomeException
                        Paths_binary_search_tree.getDataDir5
                        Paths_binary_search_tree.getDataDir2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    GHC.Base.++
                      @ GHC.Types.Char
                      ipv1
                      (GHC.CString.unpackAppendCString#
                         Paths_binary_search_tree.getDataFileName2
                         name) #) }) -}
bcf70c06cc907b998720ba44276917fb
  getDataFileName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\\"#) -}
e63415663a988810f76127780b4c9cd7
  getDynLibDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_binary_search_tree.getDynLibDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
7233c64aa568a93962a9ea2703d9128a
  getDynLibDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_binary_search_tree.getDynLibDir5
                   Paths_binary_search_tree.getDynLibDir2
                   eta) -}
55884aaab252820d2aaf33cfe4b7f331
  getDynLibDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True
                   -> (# eta, Paths_binary_search_tree.getDynLibDir3 #) } }) -}
da7d551231db03483a38c16b97354923
  getDynLibDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_binary_search_tree.getDynLibDir4) -}
f02b0144b56b2905aa47ac9654023494
  getDynLibDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("C:\\Users\\aland\\Exercism\\haskell\\binary-search-tree\\.stack-work\\install\\072e9945\\lib\\x86_64-windows-ghc-8.6.5"#) -}
16989f5c836fd8c83d82b38d5db9c400
  getDynLibDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Environment.getEnv5
                        Paths_binary_search_tree.getDynLibDir6
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Maybe.Nothing
                   -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.State#
                                                        GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Prim.Word# #)}
                             ipv of wild1 { (#,#) ds ds2 ->
                      case GHC.Prim.narrow32Word# ds2 of wild2 {
                        DEFAULT
                        -> GHC.Windows.failIf2
                             @ GHC.Base.String
                             System.Environment.getEnv3
                             ds
                        203##
                        -> System.Environment.getEnv2
                             Paths_binary_search_tree.getDynLibDir6
                             ds } }
                   GHC.Maybe.Just x -> (# ipv, x #) } }) -}
f36ce9095f49ca23bd4fa555821fce35
  getDynLibDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_binary_search_tree.getDynLibDir7) -}
5d2909b9d0d62c26049c38f0319ccd2e
  getDynLibDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("binary_search_tree_dynlibdir"#) -}
98ca967c5425dddbae85a0734d938330
  getLibDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_binary_search_tree.getLibDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
b532cfbf8b59da93ec14a4a29c591c7d
  getLibDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_binary_search_tree.getLibDir5
                   Paths_binary_search_tree.getLibDir2
                   eta) -}
4ced62f11aa65060f901d6f36cc683da
  getLibDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True
                   -> (# eta, Paths_binary_search_tree.getLibDir3 #) } }) -}
919bd25d7fc39551bfcb8ca4497f475e
  getLibDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_binary_search_tree.getLibDir4) -}
0a61134173854146b834ad559746e5d7
  getLibDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("C:\\Users\\aland\\Exercism\\haskell\\binary-search-tree\\.stack-work\\install\\072e9945\\lib\\x86_64-windows-ghc-8.6.5\\binary-search-tree-1.0.0.4-HpmOUFWbmND6AdF1IWOLFA"#) -}
9a2c3555100b2a645b5ca58125932318
  getLibDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Environment.getEnv5
                        Paths_binary_search_tree.getLibDir6
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Maybe.Nothing
                   -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.State#
                                                        GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Prim.Word# #)}
                             ipv of wild1 { (#,#) ds ds2 ->
                      case GHC.Prim.narrow32Word# ds2 of wild2 {
                        DEFAULT
                        -> GHC.Windows.failIf2
                             @ GHC.Base.String
                             System.Environment.getEnv3
                             ds
                        203##
                        -> System.Environment.getEnv2
                             Paths_binary_search_tree.getLibDir6
                             ds } }
                   GHC.Maybe.Just x -> (# ipv, x #) } }) -}
ca5f72539c45e7b0f968cc4682bfe8cc
  getLibDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_binary_search_tree.getLibDir7) -}
51242b27050766e74890a50c49fd9f6d
  getLibDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("binary_search_tree_libdir"#) -}
254f5fd91e74339da506aa1d3f1733f9
  getLibexecDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_binary_search_tree.getLibexecDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
4b62919da093cad05eeb43a1522dc766
  getLibexecDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_binary_search_tree.getLibexecDir5
                   Paths_binary_search_tree.getLibexecDir2
                   eta) -}
3df740f558ee676c89aca9cabed0550c
  getLibexecDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True
                   -> (# eta, Paths_binary_search_tree.getLibexecDir3 #) } }) -}
a947192e285297a792141b4242b126e0
  getLibexecDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_binary_search_tree.getLibexecDir4) -}
70c396eea2d28a78d15f34a6b6021d5e
  getLibexecDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("C:\\Users\\aland\\Exercism\\haskell\\binary-search-tree\\.stack-work\\install\\072e9945\\libexec\\x86_64-windows-ghc-8.6.5\\binary-search-tree-1.0.0.4"#) -}
b52237af6a67d66d5edcf7b46b8cb4d6
  getLibexecDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Environment.getEnv5
                        Paths_binary_search_tree.getLibexecDir6
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Maybe.Nothing
                   -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.State#
                                                        GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Prim.Word# #)}
                             ipv of wild1 { (#,#) ds ds2 ->
                      case GHC.Prim.narrow32Word# ds2 of wild2 {
                        DEFAULT
                        -> GHC.Windows.failIf2
                             @ GHC.Base.String
                             System.Environment.getEnv3
                             ds
                        203##
                        -> System.Environment.getEnv2
                             Paths_binary_search_tree.getLibexecDir6
                             ds } }
                   GHC.Maybe.Just x -> (# ipv, x #) } }) -}
25dc6ce219ba2b0999ea9b994881d3b9
  getLibexecDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_binary_search_tree.getLibexecDir7) -}
bdf7e15266bca090b56ac856724928b3
  getLibexecDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("binary_search_tree_libexecdir"#) -}
e67e05b9355f31ae49e4cfaf3d34dd3a
  getSysconfDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_binary_search_tree.getSysconfDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
f3fbe8a210dff447e982d38ebc565bd4
  getSysconfDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_binary_search_tree.getSysconfDir5
                   Paths_binary_search_tree.getSysconfDir2
                   eta) -}
ecd289f7415edf97a703fe576574246d
  getSysconfDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True
                   -> (# eta, Paths_binary_search_tree.getSysconfDir3 #) } }) -}
07e28e03c4966bc147352719349ff454
  getSysconfDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_binary_search_tree.getSysconfDir4) -}
be02df1f6b7964355a74d56eb34db003
  getSysconfDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("C:\\Users\\aland\\Exercism\\haskell\\binary-search-tree\\.stack-work\\install\\072e9945\\etc"#) -}
c834f5d405918d22888b98b086f8a1a7
  getSysconfDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Environment.getEnv5
                        Paths_binary_search_tree.getSysconfDir6
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Maybe.Nothing
                   -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.State#
                                                        GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Prim.Word# #)}
                             ipv of wild1 { (#,#) ds ds2 ->
                      case GHC.Prim.narrow32Word# ds2 of wild2 {
                        DEFAULT
                        -> GHC.Windows.failIf2
                             @ GHC.Base.String
                             System.Environment.getEnv3
                             ds
                        203##
                        -> System.Environment.getEnv2
                             Paths_binary_search_tree.getSysconfDir6
                             ds } }
                   GHC.Maybe.Just x -> (# ipv, x #) } }) -}
d753c1acec257c027749aaba6ba88962
  getSysconfDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_binary_search_tree.getSysconfDir7) -}
db89081a6326feda6b45210665d756e4
  getSysconfDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("binary_search_tree_sysconfdir"#) -}
480e4020e4211206fb96884e8d945129
  version :: Data.Version.Version
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Version.Version
                   Paths_binary_search_tree.version1
                   (GHC.Types.[] @ GHC.Base.String)) -}
da8b0cb748e19b3f5f88788ee6620df6
  version1 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Paths_binary_search_tree.version7
                   Paths_binary_search_tree.version2) -}
aa536a6ad8dc43320552b2a892011ead
  version2 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Paths_binary_search_tree.version6
                   Paths_binary_search_tree.version3) -}
22626fce6df0872a8bffe3a120d5f106
  version3 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Paths_binary_search_tree.version6
                   Paths_binary_search_tree.version4) -}
c930bedfde7cadd9058ee532fabb6746
  version4 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Paths_binary_search_tree.version5
                   (GHC.Types.[] @ GHC.Types.Int)) -}
251652d5421376be4d3e4f001f095886
  version5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
d4b2198e18627a91ab73dbc0ce401a29
  version6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
1e728aa3dcf37f0111ef92834e142470
  version7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

