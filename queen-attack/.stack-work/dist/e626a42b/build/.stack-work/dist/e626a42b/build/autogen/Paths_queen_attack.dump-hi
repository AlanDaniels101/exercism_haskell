
==================== FINAL INTERFACE ====================
2019-11-08 16:34:54.2792612 UTC

interface queen-attack-2.2.0.7-DwKqnBkRmWG8vnXrdrpPDk:Paths_queen_attack 8065
  interface hash: 0f089045b6f99497b8e81b8d3bf175c1
  ABI hash: a1f532259fafc062f2a840d87ea139bc
  export-list hash: 4808c5c9fd485563b469fdba4bdb8965
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8008335b6c7f9184fc3749d6bfa27766
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Paths_queen_attack.getBinDir
  Paths_queen_attack.getDataDir
  Paths_queen_attack.getDataFileName
  Paths_queen_attack.getDynLibDir
  Paths_queen_attack.getLibDir
  Paths_queen_attack.getLibexecDir
  Paths_queen_attack.getSysconfDir
  Paths_queen_attack.version
module dependencies:
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Control.Exception 68d632685955b01899aa782b05b79cdf
import  -/  base-4.12.0.0:Data.Version 3fc9a28dff258573273513c608375452
import  -/  base-4.12.0.0:GHC.Base fbe365a916ebeeeb4bc1f895dbe83e42
import  -/  base-4.12.0.0:GHC.IO caa7ca94733978776c4f954a05ccc347
import  -/  base-4.12.0.0:GHC.IO.Exception 99271e07ec0e09b76d45c79794dad266
import  -/  base-4.12.0.0:Prelude 80c668cb99fbafebd524c5e897f8c982
import  -/  base-4.12.0.0:System.Environment 045df705c1f205b31d24a0f6340ea2db
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
addDependentFile "C:\Users\aland\AppData\Local\Programs\stack\x86_64-windows\ghc-8.6.5\lib\include\ghcversion.h" 43db44f9bb88490c2fa995e5f5ec33f2
addDependentFile ".stack-work\dist\e626a42b\build\autogen\cabal_macros.h" 2938caa5c491d47235c8497e97f19918
6cdd4b77ec490b787b0c0a41a938138a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Paths_queen_attack.$trModule3
                   Paths_queen_attack.$trModule1) -}
f463fe0ac228bc8c9ec60e242dc4a741
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Paths_queen_attack.$trModule2) -}
3678413430a6f0c758bb233810bc8e8e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Paths_queen_attack"#) -}
ca6ef077d93314e3a283d14f6426d2d9
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Paths_queen_attack.$trModule4) -}
ca6eee846d35f71b44b9a21454dc1176
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("queen-attack-2.2.0.7-DwKqnBkRmWG8vnXrdrpPDk"#) -}
ee353a0851f158476c990f68d681200a
  getBinDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_queen_attack.getBinDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
9d18043d61bf9dfba5cb17749bcb6a70
  getBinDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_queen_attack.getBinDir5
                   Paths_queen_attack.getBinDir2
                   eta) -}
78ff74811d07e003ba5b5fbc57373841
  getBinDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True -> (# eta, Paths_queen_attack.getBinDir3 #) } }) -}
3e97d3dab62c25578d4c2ef40dff8791
  getBinDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_queen_attack.getBinDir4) -}
347d879fef0bb0de0d448e0639c1281d
  getBinDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("C:\\Users\\aland\\Exercism\\haskell\\queen-attack\\.stack-work\\install\\072e9945\\bin"#) -}
3eeb997cbef7ec583b45f3c2ad792465
  getBinDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Environment.getEnv5
                        Paths_queen_attack.getBinDir6
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Maybe.Nothing
                   -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.State#
                                                        GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Prim.Word# #)}
                             ipv of wild1 { (#,#) ds ds2 ->
                      case GHC.Prim.narrow32Word# ds2 of wild2 {
                        DEFAULT
                        -> GHC.Windows.failIf2
                             @ GHC.Base.String
                             System.Environment.getEnv3
                             ds
                        203##
                        -> System.Environment.getEnv2 Paths_queen_attack.getBinDir6 ds } }
                   GHC.Maybe.Just x -> (# ipv, x #) } }) -}
5d4ed5b1cbca99874d9f7f036022c07c
  getBinDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_queen_attack.getBinDir7) -}
945ec174cbfb33dd716a136def4814c5
  getBinDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("queen_attack_bindir"#) -}
cc2870b4d1b5488474dec7a04c9f0e0c
  getDataDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_queen_attack.getDataDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
87800c4037eb9475e44dfef079570cf2
  getDataDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_queen_attack.getDataDir5
                   Paths_queen_attack.getDataDir2
                   eta) -}
7f4a96cb9ba2cbfd557dd651445f0b14
  getDataDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True -> (# eta, Paths_queen_attack.getDataDir3 #) } }) -}
78bc82819e32578c9ccb4329050162b2
  getDataDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_queen_attack.getDataDir4) -}
945753c1d3fc4580b6eae69ebfc88215
  getDataDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("C:\\Users\\aland\\Exercism\\haskell\\queen-attack\\.stack-work\\install\\072e9945\\share\\x86_64-windows-ghc-8.6.5\\queen-attack-2.2.0.7"#) -}
86ba4e6f449db6029403015f3cea310f
  getDataDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Environment.getEnv5
                        Paths_queen_attack.getDataDir6
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Maybe.Nothing
                   -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.State#
                                                        GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Prim.Word# #)}
                             ipv of wild1 { (#,#) ds ds2 ->
                      case GHC.Prim.narrow32Word# ds2 of wild2 {
                        DEFAULT
                        -> GHC.Windows.failIf2
                             @ GHC.Base.String
                             System.Environment.getEnv3
                             ds
                        203##
                        -> System.Environment.getEnv2 Paths_queen_attack.getDataDir6 ds } }
                   GHC.Maybe.Just x -> (# ipv, x #) } }) -}
eb09313e9021bc9781332af3683b2292
  getDataDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_queen_attack.getDataDir7) -}
3d23738d37bee812cc6a608874159d9f
  getDataDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("queen_attack_datadir"#) -}
82b4246970d7c4f1eecbc873efbe4f6e
  getDataFileName :: GHC.IO.FilePath -> GHC.Types.IO GHC.IO.FilePath
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_queen_attack.getDataFileName1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.IO.FilePath>_R)) -}
61a95194d2b77f38482be1f20eb26efc
  getDataFileName1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FilePath #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (name :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.catch#
                        @ GHC.Base.String
                        @ GHC.Exception.Type.SomeException
                        Paths_queen_attack.getDataDir5
                        Paths_queen_attack.getDataDir2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    GHC.Base.++
                      @ GHC.Types.Char
                      ipv1
                      (GHC.CString.unpackAppendCString#
                         Paths_queen_attack.getDataFileName2
                         name) #) }) -}
13f6ef7914447494ece0e72b5490f908
  getDataFileName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\\"#) -}
23205c543f268f3091c99a215007651c
  getDynLibDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_queen_attack.getDynLibDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
0a9142572b572619bda25b508757c1ff
  getDynLibDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_queen_attack.getDynLibDir5
                   Paths_queen_attack.getDynLibDir2
                   eta) -}
61d037ee0d4533d1cc7072b9812a3dcd
  getDynLibDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True
                   -> (# eta, Paths_queen_attack.getDynLibDir3 #) } }) -}
c2df7022968f2dd639cb422d3a09664b
  getDynLibDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_queen_attack.getDynLibDir4) -}
e1424b487ccb292e59269b0ff4d42164
  getDynLibDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("C:\\Users\\aland\\Exercism\\haskell\\queen-attack\\.stack-work\\install\\072e9945\\lib\\x86_64-windows-ghc-8.6.5"#) -}
005f667ad764202f601e4fc31ad22f47
  getDynLibDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Environment.getEnv5
                        Paths_queen_attack.getDynLibDir6
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Maybe.Nothing
                   -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.State#
                                                        GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Prim.Word# #)}
                             ipv of wild1 { (#,#) ds ds2 ->
                      case GHC.Prim.narrow32Word# ds2 of wild2 {
                        DEFAULT
                        -> GHC.Windows.failIf2
                             @ GHC.Base.String
                             System.Environment.getEnv3
                             ds
                        203##
                        -> System.Environment.getEnv2
                             Paths_queen_attack.getDynLibDir6
                             ds } }
                   GHC.Maybe.Just x -> (# ipv, x #) } }) -}
1163ad89dec4673347e1c224bfd89caa
  getDynLibDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_queen_attack.getDynLibDir7) -}
5f9726a6f7845b33a6dee0ac054e3c84
  getDynLibDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("queen_attack_dynlibdir"#) -}
d542d4fa984c597e9de792455691e1bc
  getLibDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_queen_attack.getLibDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
fc1361739833a97f05d43116a018264a
  getLibDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_queen_attack.getLibDir5
                   Paths_queen_attack.getLibDir2
                   eta) -}
9d2cca60ce097c37dec36fb6cb844030
  getLibDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True -> (# eta, Paths_queen_attack.getLibDir3 #) } }) -}
c8b480dea5a401b3c202b211b90210a2
  getLibDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_queen_attack.getLibDir4) -}
6891325d567366971c331828bb4a0ffa
  getLibDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("C:\\Users\\aland\\Exercism\\haskell\\queen-attack\\.stack-work\\install\\072e9945\\lib\\x86_64-windows-ghc-8.6.5\\queen-attack-2.2.0.7-DwKqnBkRmWG8vnXrdrpPDk"#) -}
0174d6f5dd565534ae43a50aab435ebd
  getLibDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Environment.getEnv5
                        Paths_queen_attack.getLibDir6
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Maybe.Nothing
                   -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.State#
                                                        GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Prim.Word# #)}
                             ipv of wild1 { (#,#) ds ds2 ->
                      case GHC.Prim.narrow32Word# ds2 of wild2 {
                        DEFAULT
                        -> GHC.Windows.failIf2
                             @ GHC.Base.String
                             System.Environment.getEnv3
                             ds
                        203##
                        -> System.Environment.getEnv2 Paths_queen_attack.getLibDir6 ds } }
                   GHC.Maybe.Just x -> (# ipv, x #) } }) -}
d5039643f498fb5e9fc0457b74060d5e
  getLibDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_queen_attack.getLibDir7) -}
5f5f72b76575a2c37c5cebf9df2e1351
  getLibDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("queen_attack_libdir"#) -}
5a5f1fdaac1de8e94e43265eb4752205
  getLibexecDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_queen_attack.getLibexecDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
6df848dc371c235829851ff9da5e3262
  getLibexecDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_queen_attack.getLibexecDir5
                   Paths_queen_attack.getLibexecDir2
                   eta) -}
516cb1ca165cd2b2702e0d435cbf1ff3
  getLibexecDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True
                   -> (# eta, Paths_queen_attack.getLibexecDir3 #) } }) -}
9185e2a319534ea9fdd4d56a1199ed45
  getLibexecDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_queen_attack.getLibexecDir4) -}
ff16e7b210a42ee1239c63b0e600abc0
  getLibexecDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("C:\\Users\\aland\\Exercism\\haskell\\queen-attack\\.stack-work\\install\\072e9945\\libexec\\x86_64-windows-ghc-8.6.5\\queen-attack-2.2.0.7"#) -}
569311a4f419e546d55e7714adb00b65
  getLibexecDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Environment.getEnv5
                        Paths_queen_attack.getLibexecDir6
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Maybe.Nothing
                   -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.State#
                                                        GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Prim.Word# #)}
                             ipv of wild1 { (#,#) ds ds2 ->
                      case GHC.Prim.narrow32Word# ds2 of wild2 {
                        DEFAULT
                        -> GHC.Windows.failIf2
                             @ GHC.Base.String
                             System.Environment.getEnv3
                             ds
                        203##
                        -> System.Environment.getEnv2
                             Paths_queen_attack.getLibexecDir6
                             ds } }
                   GHC.Maybe.Just x -> (# ipv, x #) } }) -}
11a510f33120d09a4ebe2725af9175dd
  getLibexecDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_queen_attack.getLibexecDir7) -}
66f7fe56b8672b79ee1f78bdce86d962
  getLibexecDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("queen_attack_libexecdir"#) -}
604936e7c27fd40e62db455c1a5a67de
  getSysconfDir :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Paths_queen_attack.getSysconfDir1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
c10cdd964b8ab89a6bcfe94a6b8d3ede
  getSysconfDir1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ GHC.Base.String
                   @ GHC.Exception.Type.SomeException
                   Paths_queen_attack.getSysconfDir5
                   Paths_queen_attack.getSysconfDir2
                   eta) -}
a0d355788b0a9b8da82ad3b0aa75e53d
  getSysconfDir2 ::
    GHC.Exception.Type.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                 case Data.Typeable.Internal.sameTypeRep
                        @ *
                        @ *
                        @ e2
                        @ GHC.IO.Exception.IOException
                        (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                          `cast`
                        (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                        GHC.IO.Exception.$fExceptionIOException4 of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ GHC.Base.String
                        wild
                        eta
                   GHC.Types.True
                   -> (# eta, Paths_queen_attack.getSysconfDir3 #) } }) -}
7adbf317639ae86fdae7cce117f7bb0c
  getSysconfDir3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_queen_attack.getSysconfDir4) -}
cd3e226eae01d06590bbfae73b644079
  getSysconfDir4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("C:\\Users\\aland\\Exercism\\haskell\\queen-attack\\.stack-work\\install\\072e9945\\etc"#) -}
1ce52a014090d21b595b6a0ba6c16257
  getSysconfDir5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Environment.getEnv5
                        Paths_queen_attack.getSysconfDir6
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Maybe.Nothing
                   -> case {__pkg_ccall base-4.12.0.0 GHC.Prim.State#
                                                        GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Prim.Word# #)}
                             ipv of wild1 { (#,#) ds ds2 ->
                      case GHC.Prim.narrow32Word# ds2 of wild2 {
                        DEFAULT
                        -> GHC.Windows.failIf2
                             @ GHC.Base.String
                             System.Environment.getEnv3
                             ds
                        203##
                        -> System.Environment.getEnv2
                             Paths_queen_attack.getSysconfDir6
                             ds } }
                   GHC.Maybe.Just x -> (# ipv, x #) } }) -}
c4186b0e2c1b7f19d0d213f8bb66f1f9
  getSysconfDir6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Paths_queen_attack.getSysconfDir7) -}
622f4fbc67e1c840ffdd056c3c0a88a7
  getSysconfDir7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("queen_attack_sysconfdir"#) -}
b6f9fbc3150507c06cf513be184c19c2
  version :: Data.Version.Version
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Version.Version
                   Paths_queen_attack.version1
                   (GHC.Types.[] @ GHC.Base.String)) -}
c990dfc5a3442040834101bf8d85c064
  version1 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Paths_queen_attack.version7
                   Paths_queen_attack.version2) -}
1cf9d0d1c6c8d4527fac8e7e4caa37d9
  version2 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Paths_queen_attack.version7
                   Paths_queen_attack.version3) -}
b6100a2751f83acb2e05a8f7d5b6fa92
  version3 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Paths_queen_attack.version6
                   Paths_queen_attack.version4) -}
574fe10dd5792caf094f0bd22537e079
  version4 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Paths_queen_attack.version5
                   (GHC.Types.[] @ GHC.Types.Int)) -}
5aa3643aa68d514bfe1ac928641fd311
  version5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7#) -}
ab1812b2b8e860f6a2f0ee14978bcfed
  version6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
1ab5ee56ced5798ca6d0359fd061b799
  version7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

