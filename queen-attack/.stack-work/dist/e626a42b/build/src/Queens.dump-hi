
==================== FINAL INTERFACE ====================
2019-12-20 23:22:11.5901652 UTC

interface queen-attack-2.2.0.7-DwKqnBkRmWG8vnXrdrpPDk:Queens 8065
  interface hash: 12cd30874ffe79b25a6557e4ab061d71
  ABI hash: d51b501da090e4ae6a0de81b6942a8e5
  export-list hash: 7ac5d46e912316a74f4af4a26ad190d1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f5f279ca9ba2d95eb058fe365944f930
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Queens.boardString
  Queens.canAttack
module dependencies:
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Data.List 6c60559263db7cf0f22549b9673785b9
import  -/  base-4.12.0.0:Data.OldList 9c79c2259344fa5285ac49797d9c5db1
import  -/  base-4.12.0.0:GHC.Base fbe365a916ebeeeb4bc1f895dbe83e42
import  -/  base-4.12.0.0:GHC.List bb56c56a8dc21963b5824914872db158
import  -/  base-4.12.0.0:GHC.Num 8203d3fee487126cffd5e55ba5d0e8c3
import  -/  base-4.12.0.0:Prelude 80c668cb99fbafebd524c5e897f8c982
import  -/  ghc-prim-0.5.3:GHC.Classes 6002495dc43e58d28c87e5e5e058752a
f47c0e60fb70d1ab1b233dd5dc66bbde
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Queens.$trModule3
                   Queens.$trModule1) -}
41b7c0a55f4becb8060ab97e42de8c8e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Queens.$trModule2) -}
6f8d065a03fc79ac9ca8e231cfcba29e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Queens"#) -}
6effe45ef99c510cd949847bfc05d14f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Queens.$trModule4) -}
e30f9e840d2b570f991d705be23984b9
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("queen-attack-2.2.0.7-DwKqnBkRmWG8vnXrdrpPDk"#) -}
a1528585947a8984024a3a68cdfcdeae
  $wcanAttack ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Prim.==# ww ww2 of lwild {
                   DEFAULT
                   -> case ww1 of wild { GHC.Types.I# x1 ->
                      case ww3 of wild1 { GHC.Types.I# y ->
                      case GHC.Prim.==# x1 y of lwild1 {
                        DEFAULT
                        -> let {
                             x2 :: GHC.Prim.Int# = GHC.Prim.-# ww2 ww
                           } in
                           let {
                             x3 :: GHC.Prim.Int# = GHC.Prim.-# y x1
                           } in
                           case GHC.Prim.>=# x2 0# of lwild2 {
                             DEFAULT
                             -> case GHC.Prim.>=# x3 0# of lwild3 {
                                  DEFAULT
                                  -> GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==#
                                          (GHC.Prim.negateInt# x2)
                                          (GHC.Prim.negateInt# x3))
                                  1#
                                  -> GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# (GHC.Prim.negateInt# x2) x3) }
                             1#
                             -> case GHC.Prim.>=# x3 0# of lwild3 {
                                  DEFAULT
                                  -> GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x2 (GHC.Prim.negateInt# x3))
                                  1#
                                  -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# x2 x3) } }
                        1# -> GHC.Types.True } } }
                   1# -> GHC.Types.True }) -}
f982bd040970a67624b2bfc7430221cb
  $wlineify :: GHC.Prim.Int# -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,1*U>, Inline: [2] -}
d638c423c9e1c3e6f93bfbe479c99fca
  $wxs :: GHC.Prim.Int# -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [2] -}
df2c081beeb06d6f876efa91841b0264
  board :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (xs :: GHC.Base.String) ->
                 case xs of wild {
                   [] -> Queens.boardString6
                   : x1 xs1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (Queens.$wlineify
                           111#
                           (GHC.Types.:
                              @ GHC.Types.Char
                              x1
                              (Data.OldList.prependToAll
                                 @ GHC.Types.Char
                                 Queens.boardString5
                                 xs1)))
                        Queens.boardString3 }) -}
a5b9924f21bf825c7eb2daa53748c435
  boardString ::
    GHC.Maybe.Maybe (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Maybe.Maybe (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: GHC.Maybe.Maybe
                            (GHC.Types.Int, GHC.Types.Int))
                   (ds1 :: GHC.Maybe.Maybe (GHC.Types.Int, GHC.Types.Int)) ->
                 case ds of wild {
                   GHC.Maybe.Nothing
                   -> case ds1 of wild1 {
                        GHC.Maybe.Nothing -> Queens.boardString7
                        GHC.Maybe.Just ds2
                        -> case ds2 of wild2 { (,) bY bX ->
                           Queens.board
                             (Queens.replaceNth
                                @ GHC.Types.Char
                                (case bX of wild3 { GHC.Types.I# x1 ->
                                 case bY of wild4 { GHC.Types.I# y ->
                                 GHC.Types.I# (GHC.Prim.+# x1 (GHC.Prim.*# 8# y)) } })
                                Queens.boardString2
                                Queens.emptyBoard) } }
                   GHC.Maybe.Just ds2
                   -> case ds2 of wild1 { (,) wY wX ->
                      case ds1 of wild2 {
                        GHC.Maybe.Nothing
                        -> Queens.board
                             (Queens.replaceNth
                                @ GHC.Types.Char
                                (case wX of wild3 { GHC.Types.I# x1 ->
                                 case wY of wild4 { GHC.Types.I# y ->
                                 GHC.Types.I# (GHC.Prim.+# x1 (GHC.Prim.*# 8# y)) } })
                                Queens.boardString1
                                Queens.emptyBoard)
                        GHC.Maybe.Just ds3
                        -> case ds3 of wild3 { (,) bY bX ->
                           Queens.board
                             (Queens.replaceNth
                                @ GHC.Types.Char
                                (case wX of wild4 { GHC.Types.I# x1 ->
                                 case wY of wild5 { GHC.Types.I# y ->
                                 GHC.Types.I# (GHC.Prim.+# x1 (GHC.Prim.*# 8# y)) } })
                                Queens.boardString1
                                (Queens.replaceNth
                                   @ GHC.Types.Char
                                   (case bX of wild4 { GHC.Types.I# x1 ->
                                    case bY of wild5 { GHC.Types.I# y ->
                                    GHC.Types.I# (GHC.Prim.+# x1 (GHC.Prim.*# 8# y)) } })
                                   Queens.boardString2
                                   Queens.emptyBoard)) } } } }) -}
b011c93fe3b4e4b16c80b23a8ffa14f0
  boardString1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'W'#) -}
cc4048e2d46914c1317268a9e8024160
  boardString2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'B'#) -}
d5d987289706e2098a9e492e3ef48b63
  boardString3 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Queens.boardString4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
047e2775ac737a24e5c3cee137f64e38
  boardString4 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\n'#) -}
cb16ba1c79b85f0fd9e2670b7acd48ec
  boardString5 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
3eea07f055f6146311a9686871c7f512
  boardString6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   (Queens.$wlineify 111# (GHC.Types.[] @ GHC.Types.Char))
                   Queens.boardString3) -}
f7e49eaaaf9f50ca094c94b0a640b300
  boardString7 :: GHC.Base.String
  {- Unfolding: (Queens.board Queens.emptyBoard) -}
1842e3fed4f7366aa45d69e7a1a9071b
  canAttack ::
    (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { (,) ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Queens.$wcanAttack ww4 ww2 ww9 ww7 } } } }) -}
03a903859f5181b1620d83cbea29af78
  emptyBoard :: [GHC.Types.Char]
  {- Unfolding: (case Queens.$wxs 64# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
6b341530db5657ab85049052ff9df90b
  replaceNth :: GHC.Types.Int -> a -> [a] -> [a]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(1*U)><L,U><S,1*U> -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

