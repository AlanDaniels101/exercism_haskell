
==================== FINAL INTERFACE ====================
2019-06-15 16:55:08.8098548 UTC

interface armstrong-numbers-1.0.0.2-5JhFggHCmKXFbLCYAxx514:ArmstrongNumbers 8043
  interface hash: 949b7ace2db960b9b5a467539ab9493f
  ABI hash: d306e2dddbd1cf18baab0ee22d5558ff
  export-list hash: 98a5628181e019160f18284da20a523b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0527c515cada2cc2079fef10aa370e66
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  ArmstrongNumbers.armstrong
module dependencies:
package dependencies: QuickCheck-2.11.3 Win32-2.6.1.0 array-0.5.2.0
                      base-4.11.1.0* containers-0.5.11.0 deepseq-1.4.3.0 digits-0.3.1
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0
                      pretty-1.1.3.6 primitive-0.6.3.0 random-1.1
                      template-haskell-2.13.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.11.1.0:Data.Foldable 6cf3e918f22d03c0870804f05cd183d1
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.Real 032ed0a1053f878238d78e95e75f2edf
import  -/  base-4.11.1.0:GHC.Show 6211aec7cccd267a5ee999e4414d7b90
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  digits-0.3.1:Data.Digits 10f2e13aecd68c9bba71737cd79786e6
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
4569661144af33208d59283351d5098c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ArmstrongNumbers.$trModule3
                   ArmstrongNumbers.$trModule1) -}
82a9ac08beb2be0e8817125e01bc3e4e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ArmstrongNumbers.$trModule2) -}
fd8eed6ea7117fd594a786db05ae65cb
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ArmstrongNumbers"#) -}
e642800867c76f58e5353f59949181ee
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS ArmstrongNumbers.$trModule4) -}
e144eda72843520144f73cd6f0cdb701
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("armstrong-numbers-1.0.0.2-5JhFggHCmKXFbLCYAxx514"#) -}
2ae45a5ee7bf6bbd3e234a51a2bb7e61
  armstrong ::
    (GHC.Real.Integral a, GHC.Show.Show a) => a -> GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(S(LS(S(C(C(S))L)LLLLLLL)L)LLLLLLLL),U(U(U(C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,C(U)),U(U(C(C1(U)),A),A,C(C1(U)),C(C1(U)),A,A,A,A),A),A,A,A,A,A,C(C1(U(1*U,1*U))),A,A)><L,1*U(A,1*C1(U),A)><L,U>,
     Unfolding: (\ @ a
                   ($dIntegral :: GHC.Real.Integral a)
                   ($dShow :: GHC.Show.Show a)
                   (eta :: a) ->
                 let {
                   $dReal :: GHC.Real.Real a = GHC.Real.$p1Integral @ a $dIntegral
                 } in
                 GHC.Classes.==
                   @ a
                   (GHC.Classes.$p1Ord @ a (GHC.Real.$p2Real @ a $dReal))
                   eta
                   (let {
                      $dNum :: GHC.Num.Num a = GHC.Real.$p1Real @ a $dReal
                    } in
                    case Data.Digits.mDigitsRev
                           @ a
                           $dIntegral
                           (GHC.Num.fromInteger @ a $dNum ArmstrongNumbers.armstrong2)
                           eta of wild {
                      GHC.Base.Nothing -> case Data.Maybe.fromJust1 ret_ty a of {}
                      GHC.Base.Just x1
                      -> let {
                           ds :: GHC.Types.Int
                           = case GHC.List.$wlenAcc
                                    @ GHC.Types.Char
                                    (GHC.Show.show @ a $dShow eta)
                                    0# of ww2 { DEFAULT ->
                             GHC.Types.I# ww2 }
                         } in
                         letrec {
                           go :: [a] -> a -> a
                             <join 2> {- Arity: 2, Strictness: <S,1*U><L,U> -}
                           = \ (ds1 :: [a]) (eta1 :: a) ->
                             case ds1 of wild1 {
                               [] -> eta1
                               : y ys
                               -> go
                                    ys
                                    (GHC.Num.+
                                       @ a
                                       $dNum
                                       eta1
                                       (GHC.Real.^
                                          @ a
                                          @ GHC.Types.Int
                                          $dNum
                                          GHC.Real.$fIntegralInt
                                          y
                                          ds)) }
                         } in
                         go
                           (GHC.List.reverse1 @ a x1 (GHC.Types.[] @ a))
                           (GHC.Num.fromInteger @ a $dNum ArmstrongNumbers.armstrong1) })) -}
9d7a830934625dcbfd220d208a75d1a8
  armstrong1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
bb5ce18f12ebc2b6bcad93e63c801225
  armstrong2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

