
==================== FINAL INTERFACE ====================
2019-06-20 21:30:42.2745545 UTC

interface main:Main 8043
  interface hash: 778da543519afb672d994fd8d24cf9be
  ABI hash: 1feb9b7535edbd05aad7fea5718a75af
  export-list hash: a8172cdbb4dad79a0576a54d0eb4ff18
  orphan hash: bad3cc146f8319fc5f30ff3f7ec185cb
  flag hash: 8aab0c017873a3054971c6e5433a63ec
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.11.3 Win32-2.6.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 base-4.11.1.0
                      bytestring-0.10.8.2 call-stack-0.1.0 clock-0.7.2 colour-2.3.4
                      containers-0.5.11.0 deepseq-1.4.3.0 directory-1.3.1.5
                      filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hspec-2.5.5
                      hspec-core-2.5.5 hspec-expectations-0.8.2 integer-gmp-1.0.2.0
                      mintty-0.1.2 pretty-1.1.3.6 primitive-0.6.3.0 quickcheck-io-0.2.0
                      random-1.1 roman-numerals-1.2.0.6 setenv-0.1.1.3 stm-2.4.5.0
                      template-haskell-2.13.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.5.0
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         hspec-core-2.5.5:Test.Hspec.Core.Example
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.11.1.0:Data.Foldable 6cf3e918f22d03c0870804f05cd183d1
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.Real 032ed0a1053f878238d78e95e75f2edf
import  -/  base-4.11.1.0:GHC.Show 6211aec7cccd267a5ee999e4414d7b90
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  hspec-2.5.5:Test.Hspec 54df06f5d545fec5f91cea5cb55c0ae8
import  -/  hspec-2.5.5:Test.Hspec.Runner 9fe7f63f5e6ed51f346724e5e71cfbc5
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Config.Options 44eafedded707b18de0b18ece30e85fc
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Runner aacfbe7ef9810029c809d32d98b97f0a
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec c73480f52a618942c509ac8e85ded21d
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec.Monad e5e9ce617af58e105519cbbabb1c58c0
import  -/  hspec-expectations-0.8.2:Test.Hspec.Expectations 40271346c6df10d72d14c4ff3ae952ea
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 6713f4457912bac968474ebbf062cd01
import  -/  roman-numerals-1.2.0.6:Roman 22a018de5ac2da718461cbe77969262a
f26e1a1bed3e7f2503fd27102247de79
  $s$fEqMaybe :: GHC.Classes.Eq (GHC.Base.Maybe [GHC.Types.Char])
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe [GHC.Types.Char])
                  (\ (ds :: GHC.Base.Maybe [GHC.Types.Char])
                     (ds1 :: GHC.Base.Maybe [GHC.Types.Char]) ->
                   case ds of wild {
                     GHC.Base.Nothing
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a1
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1 -> GHC.Base.eqString a1 b1 } })
                  Main.$s$fEqMaybe_$s$fEqMaybe_$c/= -}
30ac344b51ef463ceec8276b1d48225b
  $s$fEqMaybe_$c== ::
    GHC.Base.Maybe [GHC.Types.Char]
    -> GHC.Base.Maybe [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe [GHC.Types.Char])
                   (ds1 :: GHC.Base.Maybe [GHC.Types.Char]) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> GHC.Base.eqString a1 b1 } }) -}
e0e68be8ba44a8856b83e2d3fc9c19c5
  $s$fEqMaybe_$s$fEqMaybe_$c/= ::
    GHC.Base.Maybe [GHC.Types.Char]
    -> GHC.Base.Maybe [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: GHC.Base.Maybe [GHC.Types.Char])
                   (y :: GHC.Base.Maybe [GHC.Types.Char]) ->
                 case x of wild {
                   GHC.Base.Nothing
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a1
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just b1
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
aac5e27120fe2b7d1338501bf62bd190
  $s$fShowMaybe :: GHC.Show.Show (GHC.Base.Maybe [GHC.Types.Char])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe [GHC.Types.Char])
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ [GHC.Types.Char]
                     GHC.Show.$fShow[]_$s$fShow[]1)
                  (\ (x :: GHC.Base.Maybe [GHC.Types.Char]) ->
                   case x of wild {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n GHC.Show.$fShowMaybe1)
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)3
                             (GHC.Show.showLitString
                                b1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Types.[] @ GHC.Types.Char)))) })
                  (\ (ls :: [GHC.Base.Maybe [GHC.Types.Char]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe [GHC.Types.Char])
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ [GHC.Types.Char]
                        GHC.Show.$fShow[]_$s$fShow[]1
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
3613420d811d8c620669b9ae5e36c477
  $s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe [GHC.Types.Char]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GHC.Base.Maybe [GHC.Types.Char]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe [GHC.Types.Char])
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ [GHC.Types.Char]
                      GHC.Show.$fShow[]_$s$fShow[]1
                      GHC.Show.$fShow(,)1)
                   ls
                   s) -}
8f470deca0048d02e6fc8121ab8abb17
  $tc'Case :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8197111133229858407##
                   13847006553897280588##
                   Main.$trModule
                   Main.$tc'Case2
                   0#
                   Main.$tc'Case1) -}
6fc21dd8b35ae7df9abfcd56a3c1f8ad
  $tc'Case1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0c0299238ee13fbc2e14231d59357ec9
  $tc'Case2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Case3) -}
b70b9a2f50a01b383c0fc203a93b45f6
  $tc'Case3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Case"#) -}
9f9427b68a1c0df6b95c3a3d566064e4
  $tcCase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   990021888930651814##
                   4262142848388084561##
                   Main.$trModule
                   Main.$tcCase1
                   0#
                   GHC.Types.krep$*) -}
b0dff1fba9a2e1fbd8ccfcfdc7bfd5cc
  $tcCase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCase2) -}
7179be3aa9b5f07778c569f16b1ed2bf
  $tcCase2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Case"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
82b92bb462f37b099b2ded3c0c6ce010
  $wc ::
    GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> GHC.Base.Maybe GHC.Base.String
    -> Control.Monad.Trans.Writer.Lazy.WriterT
         [Test.Hspec.Core.Tree.SpecTree ()] GHC.Types.IO ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><C(S(SL)),1*C1(U(U,U(1*U,1*U)))><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Base.Maybe GHC.Base.String)
                   (w :: Control.Monad.Trans.Writer.Lazy.WriterT
                           [Test.Hspec.Core.Tree.SpecTree ()] GHC.Types.IO ())
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                           <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                           <GHC.Types.IO>_R
                           <()>_N ; GHC.Types.N:IO[0]
                                        <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R)
                        w1 of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (case ipv3 of wild1 { (,) b1 w' -> b1 },
                     GHC.Base.++
                       @ (Test.Hspec.Core.Tree.Tree
                            (Test.Hspec.Core.Example.ActionWith ())
                            (Test.Hspec.Core.Tree.Item ()))
                       (GHC.Types.:
                          @ (Test.Hspec.Core.Tree.SpecTree
                               (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                          (Test.Hspec.Core.Tree.Leaf
                             @ (Test.Hspec.Core.Example.ActionWith
                                  (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                             @ (Test.Hspec.Core.Tree.Item
                                  (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                             (Test.Hspec.Core.Tree.Item
                                @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                                (case GHC.Show.$w$cshowsPrec4
                                        0#
                                        ww1
                                        (GHC.Types.[] @ GHC.Types.Char) of ww3 { (#,#) ww4 ww5 ->
                                 case GHC.Base.++_$s++
                                        @ GHC.Types.Char
                                        (GHC.CString.unpackAppendCString# Main.main58 ww)
                                        ww4
                                        ww5 of wild {
                                   []
                                   -> case Main.main54 of wild1 {
                                        GHC.Base.Nothing -> Test.Hspec.Core.Tree.specItem1
                                        GHC.Base.Just v -> v }
                                   : ds2 ds3 -> wild } })
                                Main.main43
                                (GHC.Base.Nothing @ GHC.Types.Bool)
                                (Test.Hspec.Core.Example.safeEvaluateExample1
                                   @ Test.Hspec.Expectations.Expectation
                                   Test.Hspec.Core.Example.$fExampleIO1
                                     `cast`
                                   ((<Test.Hspec.Expectations.Expectation>_R
                                     ->_R <Test.Hspec.Core.Example.Params>_R
                                     ->_R <(Test.Hspec.Core.Example.Arg
                                              Test.Hspec.Expectations.Expectation
                                            -> GHC.Types.IO ())
                                           -> GHC.Types.IO ()>_R
                                     ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Test.Hspec.Core.Example.Result>_R)) ; Sym (Test.Hspec.Core.Example.N:Example[0]
                                                                                                   <Test.Hspec.Expectations.Expectation>_N))
                                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                    Test.HUnit.Lang.assertEqual1
                                      @ (GHC.Base.Maybe GHC.Base.String)
                                      Main.main30
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                      Main.$s$fEqMaybe
                                      Main.$s$fShowMaybe
                                      (GHC.Types.[] @ GHC.Types.Char)
                                      ww2
                                      (Roman.numerals ww1)
                                      eta2)
                                     `cast`
                                   (Sym (GHC.Types.N:IO[0] <()>_R)))
                                  `cast`
                                (<Test.Hspec.Core.Example.Params>_R
                                 ->_R <Test.Hspec.Core.Example.ActionWith
                                         (Test.Hspec.Core.Example.Arg
                                            Test.Hspec.Expectations.Expectation)
                                       -> GHC.Types.IO ()>_R
                                 ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                 ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))))
                          (GHC.Types.[]
                             @ (Test.Hspec.Core.Tree.SpecTree
                                  (Test.Hspec.Core.Example.Arg
                                     Test.Hspec.Expectations.Expectation))))
                         `cast`
                       ([(Test.Hspec.Core.Tree.Tree
                            (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                             ->_R <GHC.Types.IO ()>_R)
                            (Test.Hspec.Core.Tree.Item
                               (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                       (case ipv3 of wild { (,) b1 w' -> w' })) #) }) -}
efc675c76845a418eb35e5b010f7b1d5
  data Case
    = Case {description :: GHC.Base.String,
            number :: GHC.Integer.Type.Integer,
            expected :: GHC.Base.Maybe GHC.Base.String}
efc675c76845a418eb35e5b010f7b1d5
  description :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds1 }) -}
efc675c76845a418eb35e5b010f7b1d5
  expected :: Main.Case -> GHC.Base.Maybe GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds3 }) -}
fac3f05fb8c10ac75b05efb48fc7b74b
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
7f77aee83f3e52cca9927398eec4dc33
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.Hspec.Core.Runner.hspec2
                        Main.main177
                        Main.main2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.exitFailure1 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
e159395cdf6289442a03c1e2478276a1
  main10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main123
                   Main.main122
                   Main.main119
                   Main.main11
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
0607eaad5e4eae33208d532f1ebbacf1
  main100 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("90, being 100 - 10, is XC"#) -}
c6132f5334a98643e84a5c049e5e37b2
  main101 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main102) -}
a15b736268d2d43f49e346f6bb54e9a3
  main102 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main103) -}
48e0e1b4ee5afeff1c8285ec44fd15d1
  main103 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LIX"#) -}
604045def975aafb44024f74aaa7912d
  main104 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (59) -}
58062997257369ab7132dbcce4cce21a
  main105 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main106) -}
dd6f1ce8d74ad73e944f8d201de6b1f9
  main106 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("50 is a single L"#) -}
d974395e4a949fbfc7b9ab065e39bb7c
  main107 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main108) -}
3e5e25211378da17df5f763e5d49706b
  main108 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main109) -}
ab65dab52ad450502f9637ad7a8ca982
  main109 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("XLIX"#) -}
b061f78e4dc89e6a3d1fe812d121e2d9
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main117
                   Main.main116
                   Main.main113
                   Main.main12
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
62566d3206d3a6c0cb3eef83e5cdbf5c
  main110 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (49) -}
a7366b8e23e6f7597fccf9e4ffd66bc8
  main111 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main112) -}
4707a75037d0e26ac778f232b97b28cf
  main112 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("49 is not 40 + 5 + 4 but rather 50 - 10 + 10 - 1"#) -}
dca92bcd90f6d4bf522acb5d0a0aabdd
  main113 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main114) -}
65e56c4e0eefeb20e31a14676b9e3292
  main114 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main115) -}
6ba8f3f4414441ef119278028be291da
  main115 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("XLVIII"#) -}
d02e7be6f4d731a7f33defb213230132
  main116 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (48) -}
b09053ca022503feec3188a7281903c4
  main117 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main118) -}
44faee84b7bb8db0e133a8d8002d101d
  main118 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("48 is not 50 - 2 but rather 40 + 8"#) -}
acd9f9d4850deaeace1ff90a85f3eea2
  main119 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main120) -}
72222078004d926982d31e81d9ca2880
  main12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main111
                   Main.main110
                   Main.main107
                   Main.main13
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
1cd22a58697b283bd3414d1184a7f80f
  main120 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main121) -}
222482008e408fce5a88d316c0804f03
  main121 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("XXVII"#) -}
d06de652734fa7200c5799dbf23e93f7
  main122 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (27) -}
032f668ee258d5c0fab75bfddf16d6bb
  main123 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main124) -}
403838dbb399867fadc95fb950798786
  main124 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("20 is two X's"#) -}
1295cf1ce68965b8a0986ee57956d898
  main125 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main126) -}
fb3cb21f5853161f94514c8650caf567
  main126 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main127) -}
a6bdc1328f8bd469187f665175a56209
  main127 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IX"#) -}
96d3209cdc8898503e58cf02d10cb112
  main128 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (9) -}
7189510b7d9b56a2b63558d4a3eaf466
  main129 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main130) -}
c0b432f80d6beec60fb957452585cf24
  main13 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main105
                   Main.main104
                   Main.main101
                   Main.main14
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
172f5b2b3c69a057c34819116263396f
  main130 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("9, being 10 - 1, is IX"#) -}
21f7c24335abfbacda67bd2dcdca4cc4
  main131 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main132) -}
0e0a5b7338e43bd9d430f10423006516
  main132 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main133) -}
f8773e6f198e0993e5c321ff4a21a561
  main133 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("VI"#) -}
085d06a8ad8572a06a820cd2c512fb6a
  main134 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (6) -}
9c3efdfa69fa91931664f705f2f9dc73
  main135 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main136) -}
7435e4d1dcc846ea7a25afb6cdf6ff2d
  main136 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("6, being 5 + 1, is VI"#) -}
2f1f375fa9d04073911664b122a04201
  main137 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main138) -}
3f6469f7b198ef70d915f13d74a0d16f
  main138 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main139) -}
e2a392a2280cceaf2ce73b84abf66ce0
  main139 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("V"#) -}
de0a9c27429013f2140259b04804550f
  main14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main99
                   Main.main98
                   Main.main95
                   Main.main15
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
ea07e44bb9cd61ac6ecfdc297faafc36
  main140 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (5) -}
c1da7f3b22395a8076d506003965726f
  main141 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main142) -}
7770d79efc00d719d175f7b40232b1e2
  main142 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("5 is a single V"#) -}
9f72a9a9008522aaafc9ba8853ad6362
  main143 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main144) -}
a8ca3b8ca4afce3f7149e10a67ced53b
  main144 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main145) -}
90ccd4ec180e34382b1607fc20b730dc
  main145 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IV"#) -}
2b8198d90ff63bbe95fc621bf6f4802b
  main146 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
6ed6987585601a460bf2a2c5e84a863d
  main147 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main148) -}
ff3b0b1bec217f66af5ad7d314c9aa3e
  main148 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("4, being 5 - 1, is IV"#) -}
1ccd35208a7e425f5da94546b50d51ac
  main149 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main150) -}
2871bf73e7fd48feedb000ed5f413377
  main15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main93
                   Main.main92
                   Main.main89
                   Main.main16
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
af44a2a14cb26bbc2127897a78cb0f5a
  main150 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main151) -}
34d2c4f06ef2041ce7a70fe9ced89a13
  main151 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("III"#) -}
7db96c27ef3eea178fb358adf0ed129c
  main152 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
8cb68c7aaabf4be8bae4b173aa9ce556
  main153 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main154) -}
10696331929705eb11396bb2114289c0
  main154 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("3 is three I's"#) -}
65148be737ec1eb0b9a3e6ad7ed8e734
  main155 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main156) -}
617d29fb039a0c9bada4ec2c8c280c27
  main156 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main157) -}
ecfdaf3fa7aa57eecefc7e120c6e8026
  main157 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("II"#) -}
c13712f75f22c9869bde4c3605a2fa88
  main158 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
3ee783104caf8eef87b137933d447859
  main159 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main160) -}
2d522098d1b8fb0defefcf21c52fc372
  main16 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main87
                   Main.main86
                   Main.main83
                   Main.main17
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
39d38b2e08c95b8d0b2c9c632ee79603
  main160 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("2 is two I's"#) -}
ae5cef276083d0a598c9fe0d0408e552
  main161 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main162) -}
46b52150fed00013a9a419669e141a60
  main162 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main163) -}
b6e265566b6ad057bd6303efa5dd1476
  main163 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("I"#) -}
bac62fc5aa43ffad096b9dd55fb26a4b
  main164 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
55fb4a6d7acc1421d36e3003d9b5a44c
  main165 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main166) -}
82e58180928c269847ee9be96afdd94d
  main166 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1 is a single I"#) -}
e2b736e2d5f35b5c24a5519dc14b24ce
  main167 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main168) -}
6d76ddceb1d6c367bf0e560a120170b5
  main168 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("numerals"#) -}
1199a02a532529dd747cee05143d1254
  main169 ::
    GHC.Base.String
    -> Test.Hspec.Core.Spec.Monad.SpecWith ()
    -> Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Unfolding: (Test.Hspec.Core.Spec.describe
                   @ ()
                   Main.main170
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))) -}
117e3e5293c60132c4c5aa20f3e6f984
  main17 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main81
                   Main.main80
                   Main.main77
                   Main.main18
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
79de0ff5a78afd0447514afb5f5bd3d5
  main170 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main175
                   Main.main171
                   GHC.Stack.Types.EmptyCallStack) -}
3086a762d3495201033f0758fc3ad66d
  main171 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main40
                   Main.main39
                   Main.main37
                   Main.main174
                   Main.main173
                   Main.main174
                   Main.main172) -}
0521e2ea65794a2c9f1df9d4b485acd8
  main172 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 28#) -}
3211a1a2a30d7a23aedcfc976cea906b
  main173 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
ab120f2ba1131b9cb0ba2273c6739376
  main174 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 14#) -}
ecd519c30eea180e2ea90c7f9ad6db9d
  main175 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main176) -}
6a030b67342f361e7f207c2f76e9f71e
  main176 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("describe"#) -}
ce8b1d6ac2619b27ad4334b3421a0e08
  main177 :: Test.Hspec.Core.Config.Options.Config
  {- Unfolding: (Test.Hspec.Core.Config.Options.Config
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.True
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Test.Hspec.Core.Example.defaultParams1
                   Test.Hspec.Core.Config.Options.ColorAuto
                   GHC.Types.True
                   (GHC.Base.Nothing @ Test.Hspec.Core.Formatters.Monad.Formatter)
                   GHC.Types.False
                   Test.Hspec.Core.Config.Options.defaultConfig1
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
3f9816351f1092dda32ed4a187b4449f
  main178 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
83c80b1bf024ea0f6e6757138050ba8c
  main18 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main75
                   Main.main74
                   Main.main71
                   Main.main19
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
5bf2be398c3931bf388a376908342ef3
  main19 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main69
                   Main.main68
                   Main.main65
                   Main.main20
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
f17903bd0c5182a98bac53dace70ffa3
  main2 :: Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Unfolding: (Main.main169
                   Main.main167
                   Main.main3
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                       <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                       <GHC.Types.IO>_R
                                                       <()>_N) ; Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N) <()>_N))) -}
be428755f705cc4a4d554e736354565d
  main20 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main63
                   Main.main62
                   Main.main59
                   Main.main21
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
7edc96b8df6af1b19483dee3b6cf244a
  main21 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main28
                   Main.main27
                   Main.main24
                   Main.main22
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
4d7df74ca1b7ea1405e9fe1fef644d37
  main22 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.main23 #)) -}
51bf9c978a55ec1244a1a88c76b0c44c
  main23 :: ((), [Test.Hspec.Core.Tree.SpecTree ()])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Tuple.(),
                  GHC.Types.[]
                    @ (Test.Hspec.Core.Tree.Tree
                         (Test.Hspec.Core.Example.ActionWith ())
                         (Test.Hspec.Core.Tree.Item ())))) -}
5d5a5379b22127f646a09c2c965f3815
  main24 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main25) -}
060e54297d46c4ec120d9ba716bddc6c
  main25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main26) -}
f671d54a2faf3e3ad1a7f1cf1f1245f9
  main26 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MMM"#) -}
6fa10631dc020f606b514177fd35b0a6
  main27 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3000) -}
32918c5fe374c46e14e02634a1edd612
  main28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main29) -}
c9720b53b6115a1560b22068a0b699f3
  main29 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("3000 is three M's"#) -}
ef586c412acab887ec03bae47d76bc91
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Main.$wc
                   Main.main165
                   Main.main164
                   Main.main161
                   Main.main4
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
094602f3a433a061dc4cebedf7d0a7e0
  main30 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?6
                   Test.HUnit.Base.@?=2
                   Main.main31) -}
ede1b253269e8748aabcc3f030b357ed
  main31 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe6
                   Test.Hspec.Expectations.shouldBe2
                   Main.main32) -}
4e03ab2c9a616c76254356b672b49c39
  main32 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main41
                   Main.main33
                   GHC.Stack.Types.EmptyCallStack) -}
3477912cde817a3d6b5b6554ebb3d650
  main33 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main40
                   Main.main39
                   Main.main37
                   Main.main36
                   Main.main35
                   Main.main36
                   Main.main34) -}
680f300938240205a62b46ff45525d6e
  main34 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 73#) -}
0190049258aaece551472a2fa8fa1ffc
  main35 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 23#) -}
8649711c036797ec1b9d8a320bacef65
  main36 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 20#) -}
474d96a328d2fb1c6f4cacb11065459a
  main37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main38) -}
d2a61bc0702bacc6817b0b23bc973362
  main38 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test\\Tests.hs"#) -}
4243f475ee1fa14f8ad672ea7480a74a
  main39 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule2) -}
1f15fdd5e3f0ca4fa8035a1bbc102d30
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main159
                   Main.main158
                   Main.main155
                   Main.main5
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
e99a05e53f46f649eade686ab45a2986
  main40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule4) -}
ad9a6b85218c39cf3bc39e4a40ef8a4c
  main41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main42) -}
931758a2669bfe28cd4b78e05b84b72a
  main42 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("shouldBe"#) -}
b2e8c4ace9aee1b3b4d9f8e33d337813
  main43 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location.Location
  {- Unfolding: (Test.Hspec.Core.Tree.location11 Main.main44) -}
5ce727de4973bf245b7126a04b89c4c0
  main44 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.location9
                   Test.Hspec.Core.Tree.location1
                   Main.main45) -}
f0cd0e44c46ffacadbb0a6cf08e28cf7
  main45 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem14
                   Test.Hspec.Core.Tree.specItem11
                   Main.main46) -}
331530463380dfbdcbd4e0830567622d
  main46 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it6
                   Test.Hspec.Core.Spec.it2
                   Main.main47) -}
3a1c4009b20e23be0494d362d15c3e9b
  main47 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main52
                   Main.main48
                   GHC.Stack.Types.EmptyCallStack) -}
dd3d4cc2a004305774004be830ec0c07
  main48 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main40
                   Main.main39
                   Main.main37
                   Main.main51
                   Main.main50
                   Main.main51
                   Main.main49) -}
a9f6964863ccb68a1581b2c44e6340dc
  main49 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 45#) -}
c1ea766908f2d63cd53f1c271cfe845d
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main153
                   Main.main152
                   Main.main149
                   Main.main6
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
4a74c0e9b25c0215b378001e5af8adfa
  main50 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 21#) -}
2f8f3a0d31c482b540f8153595f7e400
  main51 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 17#) -}
2d6df9683ec9c38a1d0dca8b1534621b
  main52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main53) -}
c890bebd21c6419a762267e1d45b181a
  main53 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("it"#) -}
d2012f3b79322945d05931e596d2de15
  main54 :: GHC.Base.Maybe GHC.Base.String
  {- Unfolding: (Test.Hspec.Core.Tree.specGroup19 Main.main55) -}
533140758a423a14d83bfff777541da7
  main55 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.location9
                   Test.Hspec.Core.Tree.specGroup15
                   Main.main56) -}
a143f1af65c0bd967a281690b4073eb5
  main56 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specGroup13
                   Test.Hspec.Core.Tree.specItem9
                   Main.main57) -}
c159c00e8ebb4b61732d71f0d2599f2a
  main57 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem7
                   Test.Hspec.Core.Tree.specItem3
                   Main.main46) -}
eaff2d9ad7d83211ad2c612dd02c5169
  main58 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (": "#) -}
e8148396fecac800430b374fe405c8b4
  main59 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main60) -}
bfb3861d2adf6282df710c869a4bbba7
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main147
                   Main.main146
                   Main.main143
                   Main.main7
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
52c10c6d3a374eb389dbcdaff15b16d6
  main60 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main61) -}
341b3744bde69a21ab1fca689fcb4715
  main61 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MXXIV"#) -}
630a3eb56dbf5f38373bb6896c09f59a
  main62 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1024) -}
86f0f1ab9492759c46d3ce241986a980
  main63 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main64) -}
b5820d606005ec7e9d8a50c7bea7f0ed
  main64 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1000 is a single M"#) -}
2190f221d1bd0de5536f3c9ba4532bcd
  main65 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main66) -}
d869aaa23466c270d48bcbb4bfeff8a4
  main66 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main67) -}
b0e9dd21ae32ee1a13519a18732d0ab6
  main67 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CMXI"#) -}
ca6d6134f6b5cc0f12d710b2d2fcdd1f
  main68 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (911) -}
9fa0e5a3e98b01cf6c0e91942f0b7d3f
  main69 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main70) -}
d57dfab8600a03378f33514c2afed433
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main141
                   Main.main140
                   Main.main137
                   Main.main8
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
401eb1c7ac144589a62e5547a321567e
  main70 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("900, being 1000 - 100, is CM"#) -}
bd4699845f2a7a139f8e9fac062d8ae9
  main71 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main72) -}
1f8e1368a04aee2d01d3aaf233aec1c5
  main72 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main73) -}
ed0425057c87b65360f370c333622d00
  main73 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DLXXV"#) -}
a81f8eceb2d3db4d03e0bea8d32c5b67
  main74 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (575) -}
689ef6dc7b1caaac1d1a52192e6d83d9
  main75 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main76) -}
07ebef6a96b81ee5c81b4a6012c379ff
  main76 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("500 is a single D"#) -}
a5bae1c174c08451fd6762b267be9892
  main77 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main78) -}
de451e5c435fe8f9449bfd99aaec64aa
  main78 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main79) -}
bdf349821f03e2a7d8de9a61dc8bed6e
  main79 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CDII"#) -}
0cdda49dd62613d2bd31c6814b43eabd
  main8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main135
                   Main.main134
                   Main.main131
                   Main.main9
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
35c68aa7013658d3e18a39997ee30a70
  main80 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (402) -}
13a1318e9db93105223e7a2fe1d19dea
  main81 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main82) -}
4c4bbf9295c7274458c9a5c8f3cb9508
  main82 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("400, being 500 - 100, is CD"#) -}
87f21f9ca0ce0b2e13b3ec870e249474
  main83 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main84) -}
8c817c2416b1c08a2daade1bc6f67813
  main84 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main85) -}
a6b1e793996c92535004e2a225c78ccc
  main85 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CLXIII"#) -}
56906e469fa240deb6907e42068fe6d8
  main86 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (163) -}
d5bd2f8e6076d65b3cb873a5cc4a5250
  main87 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main88) -}
0d20a054525ba4399f10fcdd9676f47c
  main88 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("60, being 50 + 10, is LX"#) -}
d0d704a6f019a871db5fac9726b5eb43
  main89 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main90) -}
181ac94bb5c0283a65f7ceed68cd39e9
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main129
                   Main.main128
                   Main.main125
                   Main.main10
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
815469a8655598b069211b493a013e19
  main90 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main91) -}
f8fc81b2cc15b0a7914ab6a4a9e1ca26
  main91 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CXLI"#) -}
f565241407feae1947e2b6dcec7aadcc
  main92 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (141) -}
f980428d811d37f7f6f5bc1e0614607c
  main93 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main94) -}
1147d4bdfb1a2f003c448536675a9ea3
  main94 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("100 is a single C"#) -}
b234a3962e4a7a37d775e96807b6c5fd
  main95 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just @ [GHC.Types.Char] Main.main96) -}
f99afc2abcc84e04f46aa772ad6c31b0
  main96 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main97) -}
bb35795f937159582c39d49f03abe47a
  main97 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("XCIII"#) -}
174f24376ba83385d426654c3ea52484
  main98 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (93) -}
60fcd9bece1e0fa26674e89081b9ea8a
  main99 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main100) -}
efc675c76845a418eb35e5b010f7b1d5
  number :: Main.Case -> GHC.Integer.Type.Integer
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds2 }) -}
"SPEC/Main $fEqMaybe @ [Char]" [orphan] forall (v :: GHC.Classes.Eq
                                                       [GHC.Types.Char])
  GHC.Base.$fEqMaybe @ [GHC.Types.Char] v = Main.$s$fEqMaybe
"SPEC/Main $fEqMaybe_$c/= @ [Char]" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                               [GHC.Types.Char])
  GHC.Base.$fEqMaybe_$c/= @ [GHC.Types.Char] $dEq
  = Main.$s$fEqMaybe_$s$fEqMaybe_$c/=
"SPEC/Main $fEqMaybe_$c== @ [Char]" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                               [GHC.Types.Char])
  GHC.Base.$fEqMaybe_$c== @ [GHC.Types.Char] $dEq
  = Main.$s$fEqMaybe_$c==
"SPEC/Main $fShowMaybe @ [Char]" [orphan] forall (v :: GHC.Show.Show
                                                         [GHC.Types.Char])
  GHC.Show.$fShowMaybe @ [GHC.Types.Char] v = Main.$s$fShowMaybe
"SPEC/Main $fShowMaybe_$cshowList @ [Char]" [orphan] forall ($dShow :: GHC.Show.Show
                                                                         [GHC.Types.Char])
  GHC.Show.$fShowMaybe_$cshowList @ [GHC.Types.Char] $dShow
  = Main.$s$fShowMaybe_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

