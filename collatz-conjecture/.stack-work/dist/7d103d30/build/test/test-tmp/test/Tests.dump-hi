
==================== FINAL INTERFACE ====================
2019-03-26 17:26:25.5740045 UTC

interface main:Main 8043
  interface hash: 28b60c86a2fb0db4e4abfbf5a4d30b22
  ABI hash: f019bd4e9b913f1b9ce951c2bd65c3a0
  export-list hash: 8ffa59da2c716e5ad523f8241d4488a6
  orphan hash: f0b5448d3d22f66f22927025c5ab5927
  flag hash: 8aab0c017873a3054971c6e5433a63ec
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.6.0.0 QuickCheck-2.11.3 Win32-2.6.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 base-4.11.1.0
                      bytestring-0.10.8.2 call-stack-0.1.0 clock-0.7.2
                      collatz-conjecture-1.2.1.4 colour-2.3.4 containers-0.5.11.0
                      deepseq-1.4.3.0 directory-1.3.1.5 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hspec-2.5.5 hspec-core-2.5.5
                      hspec-expectations-0.8.2 integer-gmp-1.0.2.0 mintty-0.1.2
                      pretty-1.1.3.6 primitive-0.6.3.0 quickcheck-io-0.2.0 random-1.1
                      setenv-0.1.1.3 stm-2.4.5.0 template-haskell-2.13.0.0 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0
orphans: colour-2.3.4:Data.Colour
         quickcheck-io-0.2.0:Test.QuickCheck.IO
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         hspec-core-2.5.5:Test.Hspec.Core.Example
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.11.1.0:Data.Foldable 6cf3e918f22d03c0870804f05cd183d1
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  collatz-conjecture-1.2.1.4:CollatzConjecture ac5b1127b5f8527f2182f01fb1146ffd
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  hspec-2.5.5:Test.Hspec 54df06f5d545fec5f91cea5cb55c0ae8
import  -/  hspec-2.5.5:Test.Hspec.Runner 9fe7f63f5e6ed51f346724e5e71cfbc5
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Config.Options 44eafedded707b18de0b18ece30e85fc
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Runner aacfbe7ef9810029c809d32d98b97f0a
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec c73480f52a618942c509ac8e85ded21d
import  -/  hspec-core-2.5.5:Test.Hspec.Core.Spec.Monad e5e9ce617af58e105519cbbabb1c58c0
import  -/  hspec-expectations-0.8.2:Test.Hspec.Expectations 40271346c6df10d72d14c4ff3ae952ea
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 6713f4457912bac968474ebbf062cd01
2cd9758588a368e706e1499921530883
  $s$fEqMaybe ::
    GHC.Classes.Eq (GHC.Base.Maybe GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GHC.Integer.Type.Integer)
                  (\ (ds :: GHC.Base.Maybe GHC.Integer.Type.Integer)
                     (ds1 :: GHC.Base.Maybe GHC.Integer.Type.Integer) ->
                   case ds of wild {
                     GHC.Base.Nothing
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a1
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1 -> GHC.Integer.Type.eqInteger a1 b1 } })
                  Main.$s$fEqMaybe_$s$fEqMaybe_$c/= -}
e67f37ce26117b59cc8b7b72b3b3db1b
  $s$fEqMaybe_$c== ::
    GHC.Base.Maybe GHC.Integer.Type.Integer
    -> GHC.Base.Maybe GHC.Integer.Type.Integer -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe GHC.Integer.Type.Integer)
                   (ds1 :: GHC.Base.Maybe GHC.Integer.Type.Integer) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> GHC.Integer.Type.eqInteger a1 b1 } }) -}
801b615489df6943d252d39679f3815f
  $s$fEqMaybe_$s$fEqMaybe_$c/= ::
    GHC.Base.Maybe GHC.Integer.Type.Integer
    -> GHC.Base.Maybe GHC.Integer.Type.Integer -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: GHC.Base.Maybe GHC.Integer.Type.Integer)
                   (y :: GHC.Base.Maybe GHC.Integer.Type.Integer) ->
                 case x of wild {
                   GHC.Base.Nothing
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a1
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just b1
                        -> case GHC.Integer.Type.eqInteger# a1 b1 of wild2 {
                             DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } } }) -}
48b7c4469bdcf18b6f1b1f99028c48e7
  $s$fShowMaybe ::
    GHC.Show.Show (GHC.Base.Maybe GHC.Integer.Type.Integer)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GHC.Integer.Type.Integer)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ GHC.Integer.Type.Integer
                     GHC.Show.$fShowInteger)
                  (\ (x :: GHC.Base.Maybe GHC.Integer.Type.Integer) ->
                   case x of wild {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n GHC.Show.$fShowMaybe1)
                          (GHC.Show.$fShowInteger_$cshowsPrec
                             GHC.Show.appPrec1
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [GHC.Base.Maybe GHC.Integer.Type.Integer])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe GHC.Integer.Type.Integer)
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ GHC.Integer.Type.Integer
                        GHC.Show.$fShowInteger
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
7b99bff435a3a7d7f773b11df213ff06
  $s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe GHC.Integer.Type.Integer] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GHC.Base.Maybe GHC.Integer.Type.Integer])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe GHC.Integer.Type.Integer)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ GHC.Integer.Type.Integer
                      GHC.Show.$fShowInteger
                      GHC.Show.$fShow(,)1)
                   ls
                   s) -}
8f470deca0048d02e6fc8121ab8abb17
  $tc'Case :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8197111133229858407##
                   13847006553897280588##
                   Main.$trModule
                   Main.$tc'Case2
                   0#
                   Main.$tc'Case1) -}
6fc21dd8b35ae7df9abfcd56a3c1f8ad
  $tc'Case1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0c0299238ee13fbc2e14231d59357ec9
  $tc'Case2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Case3) -}
b70b9a2f50a01b383c0fc203a93b45f6
  $tc'Case3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Case"#) -}
9f9427b68a1c0df6b95c3a3d566064e4
  $tcCase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   990021888930651814##
                   4262142848388084561##
                   Main.$trModule
                   Main.$tcCase1
                   0#
                   GHC.Types.krep$*) -}
b0dff1fba9a2e1fbd8ccfcfdc7bfd5cc
  $tcCase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCase2) -}
7179be3aa9b5f07778c569f16b1ed2bf
  $tcCase2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Case"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
cee9a5be157adea543622f3ad78949dd
  $wc ::
    GHC.Base.String
    -> GHC.Integer.Type.Integer
    -> GHC.Base.Maybe GHC.Integer.Type.Integer
    -> Control.Monad.Trans.Writer.Lazy.WriterT
         [Test.Hspec.Core.Tree.SpecTree ()] GHC.Types.IO ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 5,
     Strictness: <L,1*U><L,U><L,U><C(S(SL)),1*C1(U(U,U(1*U,1*U)))><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Base.Maybe GHC.Integer.Type.Integer)
                   (w :: Control.Monad.Trans.Writer.Lazy.WriterT
                           [Test.Hspec.Core.Tree.SpecTree ()] GHC.Types.IO ())
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                           <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                           <GHC.Types.IO>_R
                           <()>_N ; GHC.Types.N:IO[0]
                                        <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R)
                        w1 of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (case ipv3 of wild1 { (,) b1 w' -> b1 },
                     GHC.Base.++
                       @ (Test.Hspec.Core.Tree.Tree
                            (Test.Hspec.Core.Example.ActionWith ())
                            (Test.Hspec.Core.Tree.Item ()))
                       (GHC.Types.:
                          @ (Test.Hspec.Core.Tree.SpecTree
                               (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                          (Test.Hspec.Core.Tree.Leaf
                             @ (Test.Hspec.Core.Example.ActionWith
                                  (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                             @ (Test.Hspec.Core.Tree.Item
                                  (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                             (Test.Hspec.Core.Tree.Item
                                @ (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
                                (case ww of wild {
                                   []
                                   -> case Main.main37 of wild1 {
                                        GHC.Base.Nothing -> Test.Hspec.Core.Tree.specItem1
                                        GHC.Base.Just v -> v }
                                   : ds2 ds3 -> wild })
                                Main.main27
                                (GHC.Base.Nothing @ GHC.Types.Bool)
                                (Test.Hspec.Core.Example.safeEvaluateExample1
                                   @ Test.Hspec.Expectations.Expectation
                                   Test.Hspec.Core.Example.$fExampleIO1
                                     `cast`
                                   ((<Test.Hspec.Expectations.Expectation>_R
                                     ->_R <Test.Hspec.Core.Example.Params>_R
                                     ->_R <(Test.Hspec.Core.Example.Arg
                                              Test.Hspec.Expectations.Expectation
                                            -> GHC.Types.IO ())
                                           -> GHC.Types.IO ()>_R
                                     ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Test.Hspec.Core.Example.Result>_R)) ; Sym (Test.Hspec.Core.Example.N:Example[0]
                                                                                                   <Test.Hspec.Expectations.Expectation>_N))
                                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                    Test.HUnit.Lang.assertEqual1
                                      @ (GHC.Base.Maybe GHC.Integer.Type.Integer)
                                      Main.main14
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                      Main.$s$fEqMaybe
                                      Main.$s$fShowMaybe
                                      (GHC.Types.[] @ GHC.Types.Char)
                                      ww2
                                      (CollatzConjecture.collatz ww1)
                                      eta2)
                                     `cast`
                                   (Sym (GHC.Types.N:IO[0] <()>_R)))
                                  `cast`
                                (<Test.Hspec.Core.Example.Params>_R
                                 ->_R <Test.Hspec.Core.Example.ActionWith
                                         (Test.Hspec.Core.Example.Arg
                                            Test.Hspec.Expectations.Expectation)
                                       -> GHC.Types.IO ()>_R
                                 ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                                 ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))))
                          (GHC.Types.[]
                             @ (Test.Hspec.Core.Tree.SpecTree
                                  (Test.Hspec.Core.Example.Arg
                                     Test.Hspec.Expectations.Expectation))))
                         `cast`
                       ([(Test.Hspec.Core.Tree.Tree
                            (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                             ->_R <GHC.Types.IO ()>_R)
                            (Test.Hspec.Core.Tree.Item
                               (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                       (case ipv3 of wild { (,) b1 w' -> w' })) #) }) -}
5f581ee4f2f127e7996d63da6be1fc72
  data Case
    = Case {description :: GHC.Base.String,
            number :: GHC.Integer.Type.Integer,
            expected :: GHC.Base.Maybe GHC.Integer.Type.Integer}
5f581ee4f2f127e7996d63da6be1fc72
  description :: Main.Case -> GHC.Base.String
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds1 }) -}
5f581ee4f2f127e7996d63da6be1fc72
  expected :: Main.Case -> GHC.Base.Maybe GHC.Integer.Type.Integer
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds3 }) -}
a37316484de4f1b4ccc1474c7185ed0e
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
bc7b818a8d7e0480a11210b7360bb13f
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.Hspec.Core.Runner.hspec2
                        Main.main73
                        Main.main2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.exitFailure1 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
466ee3285a93b66bbbd7588147051e74
  main10 :: ((), [Test.Hspec.Core.Tree.SpecTree ()])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Tuple.(),
                  GHC.Types.[]
                    @ (Test.Hspec.Core.Tree.Tree
                         (Test.Hspec.Core.Example.ActionWith ())
                         (Test.Hspec.Core.Tree.Item ())))) -}
fef3b46041c300a08806de7ea5a893f9
  main11 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-15) -}
0c7ac6cec6ef9c2256adb0c35bf15deb
  main12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main13) -}
53dea282fe0c692c89ef6c1465b97eb0
  main13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("negative value is an error"#) -}
552de538d0b63ae85dbfbb1097c44cd6
  main14 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?6
                   Test.HUnit.Base.@?=2
                   Main.main15) -}
d385be1f03764b80c944d85bcfd8be35
  main15 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe6
                   Test.Hspec.Expectations.shouldBe2
                   Main.main16) -}
ff6697d2c063fdbc26d6ba553f33f10e
  main16 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main25
                   Main.main17
                   GHC.Stack.Types.EmptyCallStack) -}
a9b3c150b99d4b6d617683945b6be1c2
  main17 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main21
                   Main.main20
                   Main.main19
                   Main.main20
                   Main.main18) -}
531b84e5328242aae34df479f567220f
  main18 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 55#) -}
b169bb2405bd220872ee8b1b39e04450
  main19 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 21#) -}
53b1b1a52b068de0115eab35276a7103
  main2 :: Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Unfolding: (Main.main65
                   Main.main63
                   Main.main3
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                       <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                       <GHC.Types.IO>_R
                                                       <()>_N) ; Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0]
                                                                          <()>_N) <()>_N))) -}
163476b037eece5289ab16f814a391fe
  main20 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 19#) -}
97cf533adda1d37d93d71f56c2df6ea6
  main21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main22) -}
9da317406cc3b3d44006b72dba951693
  main22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test\\Tests.hs"#) -}
0341f92d63d8a82dd2778a15dd26308a
  main23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule2) -}
7d0a871aa2013b5d18ff6ad723499e50
  main24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$trModule4) -}
82879c18cd087865a9c91b7b7648510b
  main25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main26) -}
bc82ffa3347af6a375b1be676c19ee4d
  main26 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("shouldBe"#) -}
41db41960e753e7577544d4d0063f9f7
  main27 :: GHC.Base.Maybe Test.Hspec.Core.Example.Location.Location
  {- Unfolding: (Test.Hspec.Core.Tree.location11 Main.main28) -}
171f30c826c32241c88b7e029f24b0f4
  main28 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.location9
                   Test.Hspec.Core.Tree.location1
                   Main.main29) -}
42f3fbaa285b14d32cb42821ddb47ddd
  main29 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem14
                   Test.Hspec.Core.Tree.specItem11
                   Main.main30) -}
1fa3a73093814812da460dd0ee7760cd
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Main.$wc
                   Main.main61
                   Main.main60
                   Main.main59
                   Main.main4
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
aaa9376cd9e02bdf4c2ef7fa1802c189
  main30 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it6
                   Test.Hspec.Core.Spec.it2
                   Main.main31) -}
cf88f0587c84ef3e1887d5632df853bf
  main31 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main35
                   Main.main32
                   GHC.Stack.Types.EmptyCallStack) -}
2fc1041ce4aa7563a0ffb3d925bf69ca
  main32 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main21
                   Main.main34
                   Main.main19
                   Main.main34
                   Main.main33) -}
6d5db1730de95d56a45bb19ef05ae85a
  main33 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 45#) -}
1354533f819be336f1c51652af7783a6
  main34 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 17#) -}
649cb1be45a27b1f95358d52e03077ba
  main35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main36) -}
4771473ebe3d2356719d87345b584af1
  main36 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("it"#) -}
c224de1c9df02448f8ce1067cbdc44cf
  main37 :: GHC.Base.Maybe GHC.Base.String
  {- Unfolding: (Test.Hspec.Core.Tree.specGroup19 Main.main38) -}
f9c0d06b87e545ed69724913c9c7d65b
  main38 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.location9
                   Test.Hspec.Core.Tree.specGroup15
                   Main.main39) -}
a762b7112215320b16dad8334279c360
  main39 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specGroup13
                   Test.Hspec.Core.Tree.specItem9
                   Main.main40) -}
77b9e5abdb5ef189a4aaa32109151100
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main57
                   Main.main56
                   Main.main54
                   Main.main5
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
bcbb506cf951e5b9c5b5025ab7034b60
  main40 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Tree.specItem7
                   Test.Hspec.Core.Tree.specItem3
                   Main.main30) -}
e46c3937383a5d6c9421ab6b9f4b6ac0
  main41 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
c1508b1cb326183eee24870c6c28bd93
  main42 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main43) -}
a4d39b37b3bfade458c6a284c748e54f
  main43 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("zero is an error"#) -}
c1968ead8537766034e96cde1d5c2c34
  main44 :: GHC.Base.Maybe GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Integer.Type.Integer
                   Main.main45) -}
4e8f899ddd7ded7c7646aa10e4886af9
  main45 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (152) -}
c5f6ffa8a07b260a5726ed43ca20beab
  main46 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1000000) -}
8790da7826f6868f874fdf46422cd372
  main47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main48) -}
49f9b337cf2f6c1623f973984eb9026e
  main48 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("large number of even and odd steps"#) -}
9e51124f133b01c3fb8a0e95d8b20754
  main49 :: GHC.Base.Maybe GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Integer.Type.Integer
                   Main.main50) -}
0d0a59009acc2557b012b0d065fd7a06
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main52
                   Main.main51
                   Main.main49
                   Main.main6
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
4de30f5d0c15707accdcc396dd7791e0
  main50 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (9) -}
d903e84f98b3d5b4045a0cf3c2b81292
  main51 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (12) -}
14f527b625722ee084c22b718b5f478f
  main52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main53) -}
5a67ccbc18cb401628dfb1723911dc09
  main53 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("even and odd steps"#) -}
bb148d00f4135257673800fa9cf2ae1a
  main54 :: GHC.Base.Maybe GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Integer.Type.Integer
                   Main.main55) -}
33e7a51b24051bcdc00a7c7ad9bdcd1a
  main55 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
c6d22080e819d46f0837e879a392e888
  main56 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (16) -}
b0ea1ffb528e00c253a11b1264e5b8e0
  main57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main58) -}
53ec67eb082cea8a6084d039202f0b7e
  main58 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("divide if even"#) -}
d3eba8ea0314039fbc55ccf657da4e4e
  main59 :: GHC.Base.Maybe GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Integer.Type.Integer
                   Main.main41) -}
cf9d774a6927dd999c3002cb159b7397
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main47
                   Main.main46
                   Main.main44
                   Main.main7
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
97b02a4d21ae3940ec696cce12cf6881
  main60 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
895178bb39f0f4a82acdb9a744504df3
  main61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main62) -}
e9e249274868d043ba149217e923d7e5
  main62 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("zero steps for one"#) -}
5e10aca92bb3eeae3026c75126eb8378
  main63 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main64) -}
f46dc5d018c4b6b025bdd5b8e95f2d2f
  main64 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("collatz"#) -}
38f5d9aa624a9fe83434897f43100e79
  main65 ::
    GHC.Base.String
    -> Test.Hspec.Core.Spec.Monad.SpecWith ()
    -> Test.Hspec.Core.Spec.Monad.SpecWith ()
  {- Unfolding: (Test.Hspec.Core.Spec.describe
                   @ ()
                   Main.main66
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))) -}
bb00f3a3bb1b6db71918abc47fda0dd5
  main66 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main71
                   Main.main67
                   GHC.Stack.Types.EmptyCallStack) -}
f7083d5aa29bc8f3fafa6c1772a04e89
  main67 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main21
                   Main.main70
                   Main.main69
                   Main.main70
                   Main.main68) -}
8878c2cd17b5c9cdde3128bf71d2c64b
  main68 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 27#) -}
6791415f061962390e0ef24c7368484a
  main69 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
892d1c0182929e838a8868ea04c443f2
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main42
                   Main.main41
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   Main.main8
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
c9d77cc377f2ecb5fdb535a05084e262
  main70 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 14#) -}
4aef3d2fb1c267bdd56f977947f8844e
  main71 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main72) -}
e913b49c77c266508ca93df6b46675da
  main72 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("describe"#) -}
75d071a74987fc007eaea6079d8fc872
  main73 :: Test.Hspec.Core.Config.Options.Config
  {- Unfolding: (Test.Hspec.Core.Config.Options.Config
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.True
                   (GHC.Base.Nothing @ GHC.IO.FilePath)
                   GHC.Types.False
                   GHC.Types.False
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Test.Hspec.Core.Example.defaultParams1
                   Test.Hspec.Core.Config.Options.ColorAuto
                   GHC.Types.True
                   (GHC.Base.Nothing @ Test.Hspec.Core.Formatters.Monad.Formatter)
                   GHC.Types.False
                   Test.Hspec.Core.Config.Options.defaultConfig1
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
5bc8331680b277136a7ee53c09a04e34
  main74 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
05a2699f8ecd6322a86e27a003eb0905
  main8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wc
                   Main.main12
                   Main.main11
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   Main.main9
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <((),
                               [Test.Hspec.Core.Tree.SpecTree
                                  ()])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                      <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                                      <GHC.Types.IO>_R
                                                      <()>_N))
                   w) -}
0b526bbd60975eb79e559c88988fe099
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), [Test.Hspec.Core.Tree.SpecTree ()]) #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.main10 #)) -}
5f581ee4f2f127e7996d63da6be1fc72
  number :: Main.Case -> GHC.Integer.Type.Integer
  RecSel Left Main.Case
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Case) ->
                 case ds of wild { Main.Case ds1 ds2 ds3 -> ds2 }) -}
"SPEC/Main $fEqMaybe @ Integer" [orphan] forall (v :: GHC.Classes.Eq
                                                        GHC.Integer.Type.Integer)
  GHC.Base.$fEqMaybe @ GHC.Integer.Type.Integer v = Main.$s$fEqMaybe
"SPEC/Main $fEqMaybe_$c/= @ Integer" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                GHC.Integer.Type.Integer)
  GHC.Base.$fEqMaybe_$c/= @ GHC.Integer.Type.Integer $dEq
  = Main.$s$fEqMaybe_$s$fEqMaybe_$c/=
"SPEC/Main $fEqMaybe_$c== @ Integer" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                GHC.Integer.Type.Integer)
  GHC.Base.$fEqMaybe_$c== @ GHC.Integer.Type.Integer $dEq
  = Main.$s$fEqMaybe_$c==
"SPEC/Main $fShowMaybe @ Integer" [orphan] forall (v :: GHC.Show.Show
                                                          GHC.Integer.Type.Integer)
  GHC.Show.$fShowMaybe @ GHC.Integer.Type.Integer v
  = Main.$s$fShowMaybe
"SPEC/Main $fShowMaybe_$cshowList @ Integer" [orphan] forall ($dShow :: GHC.Show.Show
                                                                          GHC.Integer.Type.Integer)
  GHC.Show.$fShowMaybe_$cshowList @ GHC.Integer.Type.Integer $dShow
  = Main.$s$fShowMaybe_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

