
==================== FINAL INTERFACE ====================
2019-02-25 00:40:03.3928107 UTC

interface isbn-verifier-2.7.0.9-DPWgsyA2TRq4rtD51REyWL:IsbnVerifier 8043
  interface hash: ce79cf125f6ac3e3ca92fde075dbbdaf
  ABI hash: b535079d051ff22ae2227afd3c00a469
  export-list hash: dfdae975e8b6970407b11dc042e25d6b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0527c515cada2cc2079fef10aa370e66
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  IsbnVerifier.isbn
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Char c550369827d719df8be8fb1e8cd699c1
import  -/  base-4.11.1.0:Data.Foldable 6cf3e918f22d03c0870804f05cd183d1
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.List 95910b50fba2204d1a3364fe070ebf2b
import  -/  base-4.11.1.0:GHC.Num 5de8df0185e7e8d8ec29b3c61e2c8606
import  -/  base-4.11.1.0:GHC.Real 032ed0a1053f878238d78e95e75f2edf
import  -/  base-4.11.1.0:GHC.Unicode 875b8e8d21ca0bd8abbb7bede4488443
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
65a402bc28c4ec6357b70055d27e44c4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   IsbnVerifier.$trModule3
                   IsbnVerifier.$trModule1) -}
712f1a0a6d970d59d5ddb772fa9cf8f6
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS IsbnVerifier.$trModule2) -}
4cc5af28b459ff26fc672fab2168bdfd
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IsbnVerifier"#) -}
a926798ee4054b45af7e46915d10bbfd
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS IsbnVerifier.$trModule4) -}
d49578eefc262c069030d0bcfaef93c4
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("isbn-verifier-2.7.0.9-DPWgsyA2TRq4rtD51REyWL"#) -}
b2d0ec375d87ad8dfa6a2d6818a41f4c
  $wms :: GHC.Base.String -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
9a02d389ce7d1f4855aa77afd3cb2c9d
  isbn :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 let {
                   code :: [GHC.Types.Char]
                   = GHC.List.filter @ GHC.Types.Char GHC.Unicode.isAlphaNum s
                 } in
                 case GHC.List.$wlenAcc @ GHC.Types.Char code 0# of ww2 {
                   DEFAULT -> GHC.Types.False
                   10#
                   -> let {
                        exit :: GHC.Types.Bool <join 0> = IsbnVerifier.verify code
                      } in
                      let {
                        $j :: GHC.Types.Bool <join 0>
                        = let {
                            $j1 :: GHC.Types.Bool <join 0>
                            = let {
                                exit1 :: GHC.Types.Char -> GHC.Types.Bool
                                  <join 1> {- Arity: 1, Strictness: <S(S),1*U(1*U)> -}
                                = \ (eta :: GHC.Types.Char)[OneShot] ->
                                  case eta of wild { GHC.Types.C# x ->
                                  case x of wild1 {
                                    DEFAULT -> GHC.Types.False 'X'# -> IsbnVerifier.verify code } }
                              } in
                              letrec {
                                go :: [GHC.Types.Char] -> GHC.Types.Char -> GHC.Types.Bool
                                  <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U(1*U)> -}
                                = \ (ds :: [GHC.Types.Char]) (eta :: GHC.Types.Char) ->
                                  case ds of wild { [] -> exit1 eta : y ys -> go ys y }
                              } in
                              go code (GHC.List.lastError @ GHC.Types.Char)
                          } in
                          let {
                            exit1 :: GHC.Types.Char -> GHC.Types.Bool
                              <join 1> {- Arity: 1, Strictness: <S(S),1*U(U)> -}
                            = \ (y :: GHC.Types.Char)[OneShot] ->
                              case y of wild { GHC.Types.C# c# ->
                              case GHC.Prim.leWord#
                                     (GHC.Prim.int2Word# (GHC.Prim.-# (GHC.Prim.ord# c#) 48#))
                                     9## of lwild {
                                DEFAULT -> GHC.Types.False 1# -> $j1 } }
                          } in
                          letrec {
                            $wgo :: [GHC.Types.Char] -> GHC.Prim.Int# -> GHC.Types.Bool
                              <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
                            = \ (w :: [GHC.Types.Char]) (ww :: GHC.Prim.Int#) ->
                              case w of wild {
                                [] -> $j1
                                : y ys
                                -> case ww of ds1 {
                                     DEFAULT
                                     -> case y of wild1 { GHC.Types.C# c# ->
                                        case GHC.Prim.leWord#
                                               (GHC.Prim.int2Word#
                                                  (GHC.Prim.-# (GHC.Prim.ord# c#) 48#))
                                               9## of lwild {
                                          DEFAULT -> GHC.Types.False
                                          1# -> $wgo ys (GHC.Prim.-# ds1 1#) } }
                                     1# -> exit1 y } }
                          } in
                          $wgo code 9#
                      } in
                      letrec {
                        go :: [GHC.Types.Char] -> GHC.Types.Bool
                          <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: [GHC.Types.Char]) ->
                          case ds of wild {
                            [] -> exit
                            : y ys
                            -> case y of wild1 { GHC.Types.C# c# ->
                               case GHC.Prim.leWord#
                                      (GHC.Prim.int2Word# (GHC.Prim.-# (GHC.Prim.ord# c#) 48#))
                                      9## of lwild {
                                 DEFAULT -> $j 1# -> go ys } } }
                      } in
                      go code }) -}
389b3fb90f86b8d278b8d18ee0765ad5
  isbn1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
e4c2b926a53a4f4eef2a3cceebdd2bcc
  ms :: GHC.Base.String -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><S(S),1*U(1*U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Base.String) (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case IsbnVerifier.$wms w ww1 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 } }) -}
515104db5d7bb60bbc9bc7063b1575e5
  verify :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (code :: GHC.Base.String) ->
                 case IsbnVerifier.ms
                        code
                        IsbnVerifier.isbn1 of wild2 { GHC.Types.I# x1 ->
                 case GHC.Prim.remInt# x1 11# of wild {
                   DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

