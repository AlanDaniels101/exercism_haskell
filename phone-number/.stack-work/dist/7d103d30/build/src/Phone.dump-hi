
==================== FINAL INTERFACE ====================
2019-02-19 04:08:07.7351024 UTC

interface phone-number-1.6.1.8-HtJKvOhglfUHUdM76p0UYP:Phone 8043
  interface hash: f6c1280afde021b12e0a63cb9441cf00
  ABI hash: e10e90e5829453571ae708e5896f3186
  export-list hash: 7c9b7f50f0ea7bd11552283295b9b20f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0527c515cada2cc2079fef10aa370e66
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Phone.number
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Char c550369827d719df8be8fb1e8cd699c1
import  -/  base-4.11.1.0:Data.Foldable 6cf3e918f22d03c0870804f05cd183d1
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.List 95910b50fba2204d1a3364fe070ebf2b
import  -/  base-4.11.1.0:GHC.Unicode 875b8e8d21ca0bd8abbb7bede4488443
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
2e748814f36b4a3082d59dde09f79e27
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Phone.$trModule3 Phone.$trModule1) -}
4db624bf087436978f58c1ad5e36ad92
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Phone.$trModule2) -}
683fa96a5f19526a092ee8782ced4a5a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Phone"#) -}
91e0869c76c8bb2bc6cd3879aa2365a1
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Phone.$trModule4) -}
15b50457594313d00787994462caa02b
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("phone-number-1.6.1.8-HtJKvOhglfUHUdM76p0UYP"#) -}
1286b46a6335b6d14590856bf5546f99
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
61cbda5e0e09bfbdb7edcf35942907fc
  number :: GHC.Base.String -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (xs :: GHC.Base.String) ->
                 let {
                   digits :: [GHC.Types.Char]
                   = GHC.List.filter @ GHC.Types.Char GHC.Unicode.isDigit xs
                 } in
                 let {
                   $j :: GHC.Base.Maybe GHC.Base.String <join 0>
                   = case GHC.List.$wlenAcc @ GHC.Types.Char digits 0# of ww2 {
                       DEFAULT -> GHC.Base.Nothing @ GHC.Base.String
                       10#
                       -> case Phone.validNum digits of wild {
                            GHC.Types.False -> GHC.Base.Nothing @ GHC.Base.String
                            GHC.Types.True -> GHC.Base.Just @ [GHC.Types.Char] digits } }
                 } in
                 case GHC.List.$wlenAcc @ GHC.Types.Char digits 0# of ww2 {
                   DEFAULT -> $j
                   11#
                   -> case digits of wild {
                        []
                        -> case GHC.List.badHead
                           ret_ty (GHC.Base.Maybe GHC.Base.String)
                           of {}
                        : x ds1
                        -> case x of wild1 { GHC.Types.C# x1 ->
                           case x1 of wild2 {
                             DEFAULT -> $j
                             '1'#
                             -> case Phone.validNum
                                       (Phone.$wunsafeDrop @ GHC.Types.Char 1# wild) of wild3 {
                                  GHC.Types.False -> $j
                                  GHC.Types.True
                                  -> GHC.Base.Just
                                       @ [GHC.Types.Char]
                                       (Phone.$wunsafeDrop @ GHC.Types.Char 1# wild) } } } } }) -}
3997819236bedbb689fb6d4bfb7624c8
  validNum :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (xs :: GHC.Base.String) ->
                 case GHC.List.$w!!
                        @ GHC.Types.Char
                        xs
                        0# of ww { GHC.Types.C# ww1 ->
                 case Data.Char.$wdigitToInt ww1 of ww2 { DEFAULT ->
                 case GHC.Prim.># ww2 1# of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case GHC.List.$w!!
                             @ GHC.Types.Char
                             xs
                             3# of ww4 { GHC.Types.C# ww5 ->
                      case Data.Char.$wdigitToInt ww5 of ww6 { DEFAULT ->
                      GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww6 1#) } } } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

