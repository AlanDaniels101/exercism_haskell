
==================== FINAL INTERFACE ====================
2019-02-17 21:52:29.3856108 UTC

interface bob-1.4.0.10-FwoMEfbOOzz3wgwwUfaxXa:Bob 8043
  interface hash: 5f7731f15529059d9804dee8b6c3d50e
  ABI hash: 2004a9be3423dda8bf7f6aea67af0cd1
  export-list hash: e423ea34c2b08ea52dba4413674f049c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0527c515cada2cc2079fef10aa370e66
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Bob.responseFor
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Char c550369827d719df8be8fb1e8cd699c1
import  -/  base-4.11.1.0:Data.Foldable 6cf3e918f22d03c0870804f05cd183d1
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.List 95910b50fba2204d1a3364fe070ebf2b
import  -/  base-4.11.1.0:GHC.Unicode 875b8e8d21ca0bd8abbb7bede4488443
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
a96358430dd4db6c0480eb484003d0e5
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Bob.$trModule3 Bob.$trModule1) -}
489866f3c88e43fc8a962554ae272ae9
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Bob.$trModule2) -}
b9e24ea41fa132d233d8d0991b6e8f70
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bob"#) -}
f028e50905000b4d6e4928426ac9a1b6
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Bob.$trModule4) -}
e5b110dadd87299a2866925c5ba6945e
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("bob-1.4.0.10-FwoMEfbOOzz3wgwwUfaxXa"#) -}
28e078f7328be940967186f4b1e52993
  $wlvl :: GHC.Prim.Char# -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Char#) ->
                 let {
                   x :: GHC.Prim.Word# = GHC.Prim.int2Word# (GHC.Prim.ord# ww)
                 } in
                 case GHC.Prim.leWord# x 887## of lwild {
                   DEFAULT
                   -> case {__pkg_ccall base-4.11.1.0 GHC.Prim.Int#
                                                      -> GHC.Prim.State# GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Prim.Int# #)}
                             (GHC.Prim.ord# ww)
                             GHC.Prim.realWorld# of wild { (#,#) ds ds1 ->
                      case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } }
                   1#
                   -> case x of wild {
                        DEFAULT
                        -> case GHC.Prim.leWord#
                                  (GHC.Prim.minusWord# wild 9##)
                                  4## of lwild1 {
                             DEFAULT
                             -> case wild of wild1 {
                                  DEFAULT -> GHC.Types.True 160## -> GHC.Types.False }
                             1# -> GHC.Types.False }
                        32## -> GHC.Types.False } }) -}
f3fad78dcfe8ca07327a481595ee45f2
  responseFor :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (sentence :: GHC.Base.String) ->
                 case GHC.List.filter
                        @ GHC.Types.Char
                        Bob.responseFor9
                        sentence of wild {
                   [] -> Bob.responseFor7
                   : ds1 ds2
                   -> let {
                        exit :: GHC.Types.Char -> [GHC.Types.Char]
                          <join 1> {- Arity: 1, Strictness: <S(S),1*U(1*U)> -}
                        = \ (eta :: GHC.Types.Char)[OneShot] ->
                          case eta of wild1 { GHC.Types.C# x ->
                          let {
                            $j :: [GHC.Types.Char] <join 0>
                            = let {
                                exit1 :: GHC.Types.Char -> [GHC.Types.Char]
                                  <join 1> {- Arity: 1, Strictness: <S(S),1*U(1*U)> -}
                                = \ (eta1 :: GHC.Types.Char)[OneShot] ->
                                  case eta1 of wild2 { GHC.Types.C# x1 ->
                                  case x1 of wild3 {
                                    DEFAULT
                                    -> case GHC.List.filter
                                              @ GHC.Types.Char
                                              Data.Char.isLetter
                                              wild of wild4 {
                                         [] -> Bob.responseFor5
                                         : ds4 ds5 -> Bob.responseFor_go wild4 }
                                    '?'# -> Bob.responseFor3 } }
                              } in
                              letrec {
                                go :: [GHC.Types.Char] -> GHC.Types.Char -> [GHC.Types.Char]
                                  <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U(1*U)> -}
                                = \ (ds :: [GHC.Types.Char]) (eta1 :: GHC.Types.Char) ->
                                  case ds of wild2 { [] -> exit1 eta1 : y ys -> go ys y }
                              } in
                              go wild (GHC.List.lastError @ GHC.Types.Char)
                          } in
                          case x of wild2 {
                            DEFAULT -> $j
                            '?'#
                            -> case GHC.List.filter
                                      @ GHC.Types.Char
                                      Data.Char.isLetter
                                      wild of wild3 {
                                 [] -> $j
                                 : ds4 ds5
                                 -> letrec {
                                      go :: [GHC.Types.Char] -> [GHC.Types.Char]
                                        <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                                      = \ (ds :: [GHC.Types.Char]) ->
                                        case ds of wild4 {
                                          [] -> Bob.responseFor1
                                          : y ys
                                          -> case y of wild5 { GHC.Types.C# c# ->
                                             case {__pkg_ccall base-4.11.1.0 GHC.Prim.Int#
                                                                             -> GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld
                                                                             -> (# GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld,
                                                                                   GHC.Prim.Int# #)}
                                                    (GHC.Prim.ord# c#)
                                                    GHC.Prim.realWorld# of wild6 { (#,#) ds6 ds7 ->
                                             case ds7 of wild7 { DEFAULT -> go ys 0# -> $j } } } }
                                    } in
                                    go wild3 } } }
                      } in
                      letrec {
                        go :: [GHC.Types.Char] -> GHC.Types.Char -> [GHC.Types.Char]
                          <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U(1*U)> -}
                        = \ (ds :: [GHC.Types.Char]) (eta :: GHC.Types.Char) ->
                          case ds of wild1 { [] -> exit eta : y ys -> go ys y }
                      } in
                      go wild (GHC.List.lastError @ GHC.Types.Char) }) -}
3036d333b929850c1cdfc6c9dc25da4b
  responseFor1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Bob.responseFor2) -}
454f0485db6e8c1b3bdc74fcb5a29015
  responseFor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Calm down, I know what I'm doing!"#) -}
b3f4cf65d6598c6cc7d099de77d0c27f
  responseFor3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Bob.responseFor4) -}
ca9ae78bf2cc70f6bcb5375be2c4a8a3
  responseFor4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Sure."#) -}
2007ebf866f655bf301d2f95b8665141
  responseFor5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Bob.responseFor6) -}
8215dd768605c8584a831efb2b52ed5b
  responseFor6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Whatever."#) -}
191709490751733fbbb57b8fdc767e1f
  responseFor7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Bob.responseFor8) -}
b90e544f6b9ee9a834fd12e5616520ba
  responseFor8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Fine. Be that way!"#) -}
079198ab24949ce98c8fbd5211c20daa
  responseFor9 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Char) ->
                 case w of ww { GHC.Types.C# ww1 -> Bob.$wlvl ww1 }) -}
613177f76a571296fec51b34be672a3d
  responseFor_go :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

